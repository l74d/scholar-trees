(S (NP (DT This) (NN paper)) (VP (VBZ introduces) (NP (NP (DT the) (NNP Egison) (NN programming) (NN language)) (SBAR (WHNP (WP$ whose) (NN feature)) (S (VP (VBZ is) (NP (NP (JJ strong) (JJ pattern-matching) (NN facility)) (PP (IN against) (NP (CONJP (RB not) (RB only)) (NP (JJ algebraic) (NNS data) (NNS types)) (CONJP (CC but) (RB also)) (NP (NP (JJ non-free) (NNS data) (NNS types)) (SBAR (WHNP (WP$ whose) (NNS data)) (S (VP (VBP have) (NP (NP (NP (JJ multiple) (NNS ways)) (PP (IN of) (NP (NN representation)))) (PP (JJ such) (IN as) (NP (NNS sets) (CC and) (NN graphs)))))))))))))))) (. .))
(S (NP (PRP$ Our) (NN language)) (VP (VBZ supports) (NP (NP (NP (JJ multiple) (NNS occurrences)) (PP (IN of) (NP (DT the) (JJ same) (NNS variables))) (PP (IN in) (NP (DT a) (NN pattern)))) (, ,) (NP (NP (JJ multiple) (NNS results)) (PP (IN of) (NP (JJ pattern-matching)))) (, ,) (NP (NP (NN polymorphism)) (PP (IN of) (NP (NNS pattern-constructors) (CC and) (NNS loop-patterns)))) (, ,) (NP (NP (NNS patterns)) (SBAR (WHNP (IN that)) (S (VP (VBP contain) (NP (`` ``) (NP (JJ and-so-forth)) ('' '') (SBAR (WHNP (WP$ whose) (NN repeat) (NN count)) (S (VP (MD can) (VP (VB be) (VP (VBN changed) (PP (IN by) (NP (DT the) (NN parameter))))))))))))))) (. .))
(S (NP (DT This) (NN paper)) (VP (VP (VBZ proposes) (NP (NP (DT the) (NN way)) (SBAR (S (VP (TO to) (VP (VB design) (NP (NP (NNS expressions)) (SBAR (WHNP (WDT that)) (S (VP (VBP have) (NP (PDT all) (DT these) (NNS features)))))))))))) (CC and) (VP (VBZ demonstrates) (SBAR (WHADVP (WRB how)) (S (NP (DT these) (NNS features)) (VP (VBP are) (ADJP (JJ useful) (S (VP (TO to) (VP (VB express) (S (NP (NNS programs)) (ADJP (VBP concise)))))))))))) (. .))
(S (NP (NNP Egison)) (VP (VBZ has) (ADVP (RB already)) (VP (VBN implemented) (PP (IN in) (NP (NNP Haskell))))) (. .))
