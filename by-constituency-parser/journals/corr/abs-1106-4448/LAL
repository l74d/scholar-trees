(S (NP (PRP We)) (VP (VBP present) (NP (NP (DT a) (NN set)) (PP (IN of) (NP (NP (NNS tools)) (PP (IN for) (S (VP (VBG rewriting) (NP (NP (JJ modulo) (NN associativity) (CC and) (NN commutativity)) (PRN (-LRB- -LRB-) (NP (NNP AC)) (-RRB- -RRB-))) (PP (IN in) (NP (NNP Coq))) (, ,) (S (VP (VBG solving) (NP (DT a) (JJ long-standing) (JJ practical) (NN problem))))))))))) (. .))
(S (NP (PRP We)) (VP (VBP use) (NP (NP (CD two) (NN building) (NNS blocks)) (: :) (S (S (VP (ADVP (RB first)) (, ,) (NP (NP (DT an) (JJ extensible) (JJ reflexive) (NN decision) (NN procedure)) (PP (IN for) (NP (NP (NN equality)) (PP (NN modulo) (NNP AC))))))) (: ;) (S (NP (JJ second)) (, ,) (NP (NP (DT an) (NNP OCaml) (NN plug-in)) (PP (IN for) (NP (NP (NN pattern) (VBG matching)) (PP (JJ modulo) (NP (NNP AC)))))))))) (. .))
(S (NP (PRP We)) (VP (VBP handle) (NP (NP (JJ associative) (RB only) (NNS operations)) (, ,) (NP (JJ neutral) (NNS elements)) (, ,) (NP (JJ uninterpreted) (NN function) (NNS symbols)) (, ,) (CC and) (NP (JJ user-defined) (NN equivalence) (NNS relations)))) (. .))
(S (PP (IN By) (S (VP (VBG relying) (PP (IN on) (NP (NNS type-classes))) (PP (IN for) (NP (DT the) (NN reification) (NN phase)))))) (, ,) (NP (PRP we)) (VP (MD can) (VP (VB infer) (NP (DT these) (NNS properties)) (ADVP (RB automatically)) (, ,) (SBAR (IN so) (DT that) (S (NP (NNS end-users)) (VP (VBP do) (RB not) (VP (VB need) (S (VP (TO to) (VP (VB specify) (SBAR (SBAR (WHNP (WDT which) (NN operation)) (S (VP (VBZ is) (NP (DT A) (CC or) (NNP AC))))) (, ,) (CC or) (SBAR (WHNP (WDT which) (VBP constant)) (S (VP (VBZ is) (NP (DT a) (JJ neutral) (NN element))))))))))))))) (. .))
