(S (NP (PRP We)) (VP (VBP present) (NP (NP (DT a) (NN set)) (PP (IN of) (NP (NNS tools)))) (PP (IN for) (NP (NP (VBG rewriting) (NN modulo) (NN associativity)) (CC and) (NP (NP (NN commutativity) (-LRB- -LRB-) (NN AC) (-RRB- -RRB-)) (PP (IN in) (NP (NNP Coq)))))) (, ,) (S (VP (VBG solving) (NP (DT a) (ADJP (NP (JJ long) (HYPH -) (NN standing)) (JJ practical)) (NN problem))))) (. .))
(S (NP (PRP We)) (VP (VBP use) (NP (NP (NP (NP (CD two) (NN building)) (NP (NNS blocks))) (: :) (NP (ADVP (RB first)) (, ,) (NP (DT an) (JJ extensible) (JJ reflexive) (NN decision) (NN procedure)) (PP (IN for) (NP (NN equality) (NN modulo) (NN AC)))) (: ;) (NP (ADVP (RB second)) (, ,) (NP (DT an) (NN OCaml) (NN plug) (HYPH -) (NN in)) (PP (IN for) (NP (NN pattern))))) (VP (VBG matching) (NP (NN modulo) (NN AC))))) (. .))
(S (NP (PRP We)) (VP (VBP handle) (NP (NP (JJ associative) (RB only) (NNS operations)) (, ,) (NP (JJ neutral) (NNS elements)) (, ,) (NP (JJ uninterpreted) (NN function) (NNS symbols)) (, ,) (CC and) (NP (NML (ADJP (NN user) (HYPH -) (VBN defined)) (NN equivalence)) (NNS relations)))) (. .))
(S (PP (IN By) (S (VP (VBG relying) (PP (IN on) (NP (NP (NN type) (HYPH -) (NNS classes)) (PP (IN for) (NP (DT the) (NN reification) (NN phase)))))))) (, ,) (NP (PRP we)) (VP (MD can) (VP (VB infer) (NP (DT these) (NNS properties)) (ADVP (RB automatically)) (, ,) (SBAR (IN so) (S (NP (DT that) (NN end) (HYPH -) (NNS users)) (VP (VBP do) (RB not) (VP (VB need) (S (VP (TO to) (VP (VB specify) (SBAR (WHNP (WDT which)) (S (NP (NN operation)) (VP (VBZ is) (NP (NP (DT A) (CC or) (NN AC)) (, ,) (CC or) (SBAR (WHNP (WDT which)) (S (NP (NN constant)) (VP (VBZ is) (NP (DT a) (JJ neutral) (NN element)))))))))))))))))) (. .))
