(S (NP (NP (JJ Several) (NNS techniques)) (PP (IN for) (NP (NN analysis) (CC and) (NNS transformations)))) (VP (VBP are) (VP (VBN used) (PP (IN in) (NP (NNS compilers))))) (. .))
(S (PP (IN Among) (NP (PRP them))) (, ,) (NP (NP (DT the) (VBG peeling)) (PP (IN of) (NP (NP (NNS loops)) (PP (IN for) (NP (NN hoisting) (NNS quasi-invariants)))))) (VP (MD can) (VP (VB be) (VP (VBN used) (S (VP (TO to) (VP (VB optimize) (VP (VP (VBN generated) (NP (NN code))) (, ,) (CC or) (VP (ADVP (RB simply)) (NP (NP (NN ease) (NNS developers) (POS ')) (NNS lives)))))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (, ,) (NP (PRP we)) (VP (VBP introduce) (NP (NP (NP (DT a) (JJ new) (NN concept)) (PP (IN of) (NP (NP (NN dependency) (NN analysis)) (VP (VBN borrowed) (PP (IN from) (NP (NP (DT the) (NN field)) (PP (IN of) (NP (NNP Implicit) (NNP Computational) (NNP Complexity))))) (PRN (-LRB- -LRB-) (NP (NN ICC)) (-RRB- -RRB-)))))) (, ,) (VP (VBG allowing) (S (VP (TO to) (VP (VB work) (PP (IN with) (NP (NP (ADJP (JJ composed)) (NNS statements)) (VP (VBN called) (NP (NNP Chunks)) (S (VP (TO to) (VP (VB detect) (NP (JJR more) (NNS quasi-invariants)))))))))))))) (. .))
(S (PP (VBN Based) (PP (IN on) (NP (NP (DT an) (NN optimization) (NN idea)) (PP (VBN given) (PP (IN on) (NP (DT a) (JJ WHILE) (NN language))))))) (, ,) (NP (PRP we)) (VP (VBP provide) (NP (DT a) (NN transformation)) (NP (NP (NN method) (HYPH -) (VBG reusing)) (NP (NP (NN ICC) (NNS concepts) (CC and) (NNS techniques)) (HYPH -) (PP (TO to) (NP (NNS compilers)))))) (. .))
(S (NP (DT This) (JJ new) (NN analysis)) (VP (VP (VBZ computes) (NP (DT an) (NN invariance) (NN degree)) (PP (IN for) (NP (NP (DT each) (NN statement) (CC or) (NNS chunks)) (PP (IN of) (NP (NNS statements))))) (PP (IN by) (S (VP (VBG building) (NP (NP (DT a) (JJ new) (NN kind)) (PP (IN of) (NP (NN dependency) (NN graph)))))))) (, ,) (VP (VBZ finds) (NP (NP (DT the) (NML (NML (NN maximum)) (CC or) (NML (JJS worst) (NN dependency))) (NN graph)) (PP (IN for) (NP (NNS loops))))) (, ,) (CC and) (VP (VBZ recognizes) (SBAR (IN if) (S (NP (DT an) (JJ entire) (NN block)) (VP (VBZ is) (ADJP (JJ Quasi-Invariant)))) (CC or) (RB not)))) (. .))
(S (S (NP (DT This) (NN block)) (VP (MD could) (VP (VB be) (NP (DT an) (JJ inner) (NN loop))))) (, ,) (CC and) (S (PP (IN in) (NP (DT that) (NN case))) (NP (NP (DT the) (JJ computational) (NN complexity)) (PP (IN of) (NP (DT the) (JJ overall) (NN program)))) (VP (MD can) (VP (VB be) (VP (VBN decreased))))) (. .))
(S (NP (PRP We)) (ADVP (RB already)) (VP (VBD implemented) (NP (NP (DT a) (NN proof)) (PP (IN of) (NP (NN concept)))) (PP (IN on) (NP (DT a) (NML (NN toy) (NN C)) (NN parser) (CD 1))) (S (VP (VBG analysing) (CC and) (VBG transforming) (NP (DT the) (NNP AST) (NN representation))))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (, ,) (NP (PRP we)) (VP (VP (VBP introduce) (NP (DT the) (NN theory)) (PP (IN around) (NP (DT this) (NN concept)))) (CC and) (VP (VB present) (S (NP (DT a) (NN prototype) (NN analysis)) (VP (VB pass) (VP (VBN implemented) (PP (IN on) (NP (NNP LLVM)))))))) (. .))
(S (PP (IN In) (NP (DT a) (ADJP (RB very) (JJ near)) (NN future))) (, ,) (NP (PRP we)) (VP (MD will) (VP (VP (VB implement) (NP (DT the) (VBG corresponding) (NN transformation))) (CC and) (VP (VB provide) (NP (NNS benchmarks) (NNS comparisons))))) (. .))
