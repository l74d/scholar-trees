(S (NP (PRP We)) (VP (VBP report) (PP (IN on) (NP (NP (DT an) (NN experience)) (SBAR (S (VP (TO to) (VP (VB support) (NP (NP (JJ multiple) (NNS views)) (PP (IN of) (NP (NP (NNS programs)) (SBAR (S (VP (TO to) (VP (VB solve) (NP (NP (DT the) (NN tyranny)) (PP (IN of) (NP (DT the) (JJ dominant) (NN decomposition)))) (PP (IN in) (NP (DT a) (JJ functional) (NN setting))))))))))))))))) (. .))
(S (NP (PRP We)) (VP (VBP consider) (NP (NP (CD two) (JJ possible) (NNS architectures)) (PP (IN in) (NP (NNP Haskell))) (PP (IN for) (NP (NP (DT the) (JJ classical) (NN example)) (PP (IN of) (NP (DT the) (NN expression) (NN problem))))))) (. .))
(S (NP (PRP We)) (VP (VBP show) (SBAR (WHADVP (WRB how)) (S (NP (DT the) (NNP Haskell) (NNP Refactorer)) (VP (MD can) (VP (VB be) (VP (VBN used) (S (VP (TO to) (VP (VP (VB transform) (NP (CD one) (NN view)) (PP (IN into) (NP (DT the) (JJ other)))) (, ,) (CC and) (VP (DT the) (JJ other) (NN way) (RB back))))))))))) (. .))
(S (S (NP (DT That) (NN transformation)) (VP (VBZ is) (ADJP (VBN automated)))) (CC and) (S (NP (PRP we)) (VP (VBP discuss) (SBAR (WHADVP (WRB how)) (S (NP (DT the) (NNP Haskell) (NNP Refactorer)) (VP (VBZ has) (VP (VBN been) (VP (VBN adapted) (S (VP (TO to) (VP (VB be) (ADJP (JJ able) (S (VP (TO to) (VP (VB support) (NP (DT this) (JJ automated) (NN transformation)))))))))))))))) (. .))
(S (ADVP (RB Finally)) (, ,) (NP (PRP we)) (VP (VBP compare) (NP (NP (PRP$ our) (NN implementation)) (PP (IN of) (NP (NNS views)))) (PP (IN with) (NP (NP (DT some)) (PP (IN of) (NP (DT the) (NN literature)))))) (. .))
