(S (NP (PRP We)) (VP (VBP investigate) (NP (DT a) (NN learning) (NN algorithm)) (PP (IN in) (NP (NP (DT the) (NN context)) (PP (IN of) (NP (NP (JJ nominal) (NN automata)) (, ,) (NP (NP (DT an) (NN extension)) (PP (IN of) (NP (JJ classical) (NN automata))) (PP (TO to) (NP (NP (NNS alphabets)) (VP (VBG featuring) (NP (NNS names))))))))))) (. .))
(S (S (NP (NP (DT This) (NN class)) (PP (IN of) (NP (NN automata)))) (VP (NNS captures) (NP (JJ nominal) (JJ regular) (NNS languages)))) (: ;) (S (ADVP (RB analogously) (PP (TO to) (NP (DT the) (JJ classical) (NN language) (NN theory)))) (, ,) (NP (JJ nominal) (NNS automata)) (VP (VBP have) (VP (VBN been) (VP (VBN shown) (S (VP (TO to) (VP (VB characterise) (NP (JJ nominal) (JJ regular) (NNS expressions)) (PP (IN with) (NP (NNS binders)))))))))) (. .))
(S (NP (DT These) (NNS formalisms)) (VP (VBP are) (ADJP (JJ amenable) (PP (TO to) (NP (NP (VB abstract) (VBG modelling)) (NP (JJ resource-aware) (NNS computations)))))) (. .))
(S (NP (PRP We)) (VP (VBP propose) (NP (NP (DT a) (NN learning) (NN algorithm)) (PP (IN on) (NP (NP (JJ nominal) (JJ regular) (NNS languages)) (PP (IN with) (NP (NNS binders))))))) (. .))
(S (NP (PRP$ Our) (NN algorithm)) (VP (VBZ generalises) (NP (NP (NNP Angluin) (POS 's)) (NNP L*) (NN algorithm)) (PP (IN with) (NP (NP (NN respect)) (PP (TO to) (NP (NP (JJ nominal) (JJ regular) (NNS languages)) (PP (IN with) (NP (NNS binders)))))))) (. .))
(S (NP (PRP We)) (VP (VP (VBP show) (NP (DT the) (NN correctness))) (CC and) (VP (VB study) (NP (DT the) (JJ theoretical) (NN complexity))) (PP (IN of) (NP (PRP$ our) (NN algorithm)))) (. .))
