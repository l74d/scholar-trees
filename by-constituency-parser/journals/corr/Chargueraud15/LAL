(S (NP (JJ Cryptic) (NN type) (NN error) (NNS messages)) (VP (VBP are) (NP (NP (DT a) (JJ major) (NN obstacle)) (PP (TO to) (S (VP (VBG learning) (NP (NP (NNP OCaml)) (CC or) (NP (JJ other) (JJ ML-based) (NNS languages)))))))) (. .))
(S (PP (IN In) (NP (JJ many) (NNS cases))) (, ,) (NP (NN error) (NNS messages)) (VP (MD can) (RB not) (VP (VB be) (VP (VBN interpreted) (PP (IN without) (NP (NP (DT a) (JJ sufficiently-precise) (NN model)) (PP (IN of) (NP (DT the) (NN type) (NN inference) (NN algorithm)))))))) (. .))
(S (S (NP (NP (DT The) (NN problem)) (PP (IN of) (S (VP (VBG improving) (NP (NP (JJ type) (NN error) (NNS messages)) (PP (IN in) (NP (NNP ML)))))))) (VP (VBZ has) (VP (VBN received) (NP (NP (RB quite) (DT a) (NN bit)) (PP (IN of) (NP (NN attention)))) (PP (IN over) (NP (DT the) (JJ past) (CD two) (NNS decades)))))) (, ,) (CC and) (S (NP (JJ many) (JJ different) (NNS strategies)) (VP (VBP have) (VP (VBN been) (VP (VBN considered))))) (. .))
(S (NP (DT The) (NN challenge)) (VP (VBZ is) (S (VP (CONJP (RB not) (RB only)) (VP (TO to) (VP (VB produce) (NP (NP (NN error) (NNS messages)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (ADJP (DT both) (ADJP (RB sufficiently) (NN concise)) (CC and) (ADJP (RB systematically) (JJ useful) (PP (TO to) (NP (DT the) (NN programmer))))))))))) (, ,) (CONJP (CC but) (RB also)) (VP (VP (TO to) (VP (VB handle) (NP (DT a) (JJ full-blown) (NN programming) (NN language)))) (CC and) (VP (TO to) (VP (VB cope) (PP (IN with) (NP (JJ large-sized) (NNS programs))) (ADVP (RB efficiently)))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN work))) (, ,) (NP (PRP we)) (VP (VBP present) (NP (NP (DT a) (NN modification)) (PP (TO to) (NP (NP (DT the) (JJ traditional) (NNP ML) (NN type) (NN inference) (NN algorithm)) (VP (VBN implemented) (PP (IN in) (NP (NNP OCaml)))))) (SBAR (WHNP (IN that)) (, ,) (S (PP (IN by) (S (VP (ADVP (RB significantly)) (VBG reducing) (NP (DT the) (JJ left-to-right) (NN bias))))) (, ,) (VP (VBZ allows) (S (NP (PRP us)) (VP (TO to) (VP (VB report) (NP (NP (NN error) (NNS messages)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (ADJP (RBR more) (JJ helpful) (PP (TO to) (NP (DT the) (NN programmer)))))))))))))))) (. .))
(S (NP (PRP$ Our) (NN algorithm)) (VP (VP (VBZ remains) (ADJP (RB fully) (JJ predictable))) (CC and) (VP (VBZ continues) (S (VP (TO to) (VP (VB produce) (NP (NP (ADJP (RB fairly) (JJ concise)) (NN error) (NNS messages)) (SBAR (WHNP (WDT that)) (S (ADVP (RB always)) (VP (VBP help) (S (VP (VBG making) (NP (NP (DT some) (NN progress)) (PP (IN towards) (S (VP (VBG fixing) (NP (DT the) (NN code))))))))))))))))) (. .))
(S (NP (PRP We)) (VP (VBD implemented) (NP (PRP$ our) (NN approach)) (PP (IN as) (NP (NP (DT a) (NN patch)) (PP (TO to) (NP (DT the) (NNP OCaml) (NN compiler))))) (PP (IN in) (NP (NP (QP (RB just) (DT a) (JJ few) (CD hundred)) (NNS lines)) (PP (IN of) (NP (NN code)))))) (. .))
(S (NP (PRP We)) (VP (VBP believe) (SBAR (IN that) (S (NP (DT this) (NN patch)) (VP (MD should) (VP (VB benefit) (PP (CONJP (RB not) (RB just)) (PP (TO to) (NP (NNS beginners))) (, ,) (CONJP (CC but) (RB also)) (PP (TO to) (NP (NP (JJ experienced) (NNS programs)) (VP (VBG developing) (NP (JJ large-scale) (NNP OCaml) (NNS programs))))))))))) (. .))
