(S (NP (PRP We)) (VP (VBP study) (NP (NP (DT the) (NN problem)) (PP (IN of) (S (VP (VBG disentangling) (NP (NP (VBN locked) (NNS processes)) (PP (IN via) (NP (NN code) (NN refactoring))))))))) (. .))
(S (S (NP (PRP We)) (VP (VBP identify) (CC and) (VBP characterise) (NP (NP (DT a) (NN class)) (PP (IN of) (NP (NP (NNS processes)) (SBAR (WHNP (WDT that)) (S (VP (VBZ is) (RB not) (S (VP (VB lock) (HYPH -) (VB free))))))))))) (: ;) (S (ADVP (RB then)) (NP (PRP we)) (VP (VBP formalise) (NP (NP (DT an) (NN algorithm)) (SBAR (WHNP (WDT that)) (S (ADVP (RB statically)) (VP (VP (VBZ detects) (NP (JJ potential) (NNS locks))) (CC and) (VP (VB propose) (NP (NP (NN refactoring) (NNS procedures)) (SBAR (WHNP (WDT that)) (S (VP (VBP disentangle) (NP (VBN detected) (NNS locks))))))))))))) (. .))
