(S (NP (PRP We)) (VP (VBP propose) (NP (NP (DT a) (JJ harmonious) (NN extension)) (PP (IN of) (NP (NP (NNP OCaml) (POS 's)) (`` ') (JJ open) ('' ') (NN construct))))) (. .))
(NP (NP (NP (NNP OCaml) (POS 's)) (ADJP (VBG existing)) (NN construct) ('' ')) (NP (ADJP (JJ open)) (NML (NN M)) ('' ') (NNS imports)) (NP (NP (DT the) (NNS names)) (VP (VBN exported) (PP (IN by) (NP (NP (DT the) (NN module)) ('' ') (NN M))) ('' ') (PP (IN into) (NP (DT the) (JJ current) (NN scope))))) (. .))
(S (PP (IN At) (ADJP (JJ present))) (NP (`` ') (NN M) ('' ')) (VP (VBZ is) (VP (VBN required) (S (VP (TO to) (VP (VB be) (NP (NP (DT the) (NN path)) (PP (IN to) (NP (DT a) (NN module))))))))) (. .))
(S (NP (PRP We)) (VP (VBP propose) (S (VP (VP (VBG extending) (ADJP (`` ') (JJ open) ('' ') (PP (IN to) (S (ADVP (RB instead)) (VP (VB accept) (NP (DT an) (JJ arbitrary) (NN module) (NN expression))))))) (, ,) (VP (VBG making) (S (NP (PRP it)) (ADJP (JJ possible) (S (VP (TO to) (ADVP (RB succinctly)) (VP (VB address) (NP (NP (DT a) (NN number)) (PP (IN of) (NP (NP (ADJP (NP (VBG existing) (NN scope)) (HYPH -) (VBN related)) (NNS difficulties)) (SBAR (WHNP (WDT that)) (S (VP (VBP arise) (SBAR (WHADVP (WRB when)) (S (VP (VBG writing) (NP (NN OCaml) (NNS programs)))))))))))))))))))) (. .))
