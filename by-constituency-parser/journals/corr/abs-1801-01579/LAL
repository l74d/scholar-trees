(S (NP (NP (VBG Existing) (JJ source-code-generating) (NNS tools)) (PP (JJ such) (IN as) (NP (NNP Lex) (CC and) (NNP Yacc)))) (VP (VBP suffer) (PP (IN from) (NP (JJ practical) (NNS inconveniences))) (SBAR (IN because) (S (NP (PRP they)) (VP (VBP use) (NP (JJ disembodied) (NN code)) (S (VP (TO to) (VP (VB implement) (NP (NNS actions))))))))) (. .))
(S (S (VP (TO To) (VP (VB prevent) (NP (DT this) (NN problem))))) (, ,) (NP (JJ such) (NNS tools)) (VP (MD could) (VP (VB generate) (NP (NP (JJ closed) (NNS functors)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (ADVP (RB then)) (VP (VBN instantiated) (PP (IN by) (NP (DT the) (NN programmer))) (PP (IN with) (NP (JJ appropriate) (NN action) (NN code)))))))))) (. .))
(S (S (NP (DT This)) (VP (NNS results) (PP (IN in) (S (NP (DT all) (NN code)) (VP (VBG being) (VP (ADVP (JJ type)) (VBN checked) (PP (IN in) (NP (PRP$ its) (JJ appropriate) (NN context))))))))) (, ,) (CC and) (S (NP (PRP it)) (VP (VBZ assists) (NP (DT the) (NN type) (NN checker)) (PP (IN in) (S (VP (VBG localizing) (NP (NNS errors)) (ADVP (RB correctly))))))) (. .))
(S (NP (PRP We)) (VP (VBP have) (VP (VBN implemented) (NP (NP (NP (DT a) (NX (JJ lexer) (NN generator))) (CC and) (NX (NN parser) (NN generator))) (PP (VBN based) (PP (IN on) (NP (DT this) (NN technique))))) (PP (IN for) (NP (NP (NNP Standard) (NNP ML)) (, ,) (NP (NNP OCaml)) (, ,) (CC and) (NP (NNP Haskell)))))) (. .))
