(S (S (NP (NP (NNP Sound) (JJ exhaustiveness) (NN checking)) (PP (IN of) (NP (NN pattern-matching)))) (VP (VBZ is) (NP (NP (DT an) (JJ essential) (NN feature)) (PP (IN of) (NP (JJ functional) (NN programming) (NNS languages)))))) (, ,) (CC and) (S (NP (NNP OCaml)) (VP (VBZ supports) (NP (PRP it)) (PP (IN for) (NP (NNP GADTs))))) (. .))
(S (ADVP (RB However)) (NP (DT this) (NN check)) (VP (VBZ is) (ADJP (JJ incomplete)) (, ,) (SBAR (IN in) (IN that) (S (NP (PRP it)) (VP (MD may) (VP (VB fail) (S (VP (TO to) (VP (VB detect) (SBAR (IN that) (S (NP (DT a) (NN pattern)) (VP (MD can) (VP (VB match) (NP (DT no) (JJ concrete) (NN value)))))))))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (NP (PRP we)) (VP (VBP show) (SBAR (SBAR (IN that) (S (NP (DT this) (NN problem)) (VP (VBZ is) (ADVP (RB actually)) (ADJP (JJ undecidable))))) (, ,) (CC but) (SBAR (IN that) (S (NP (PRP we)) (VP (MD can) (VP (VB strengthen) (NP (DT the) (NN exhaustiveness) (CC and) (NN redundancy) (NNS checks)) (SBAR (RB so) (IN that) (S (NP (PRP they)) (VP (VBP cover) (NP (ADJP (JJR more) (JJ practical)) (NNS cases))))))))))) (. .))
(S (NP (DT The) (JJ new) (NN algorithm)) (VP (NNS relies) (PP (IN on) (NP (NP (DT a) (JJ clever) (NN modification)) (PP (IN of) (NP (NP (NN type) (NN inference)) (PP (IN for) (NP (NNS patterns)))))))) (. .))
