(S (PP (IN In) (NP (DT this) (NN paper))) (, ,) (NP (PRP we)) (VP (VBP prove) (NP (NP (NN correctness)) (PP (IN of) (S (VP (VBG parallelizing) (NP (DT a) (NN string) (NN matcher)) (S (VP (VBG using) (NP (NNP Haskell)) (PP (IN as) (NP (DT a) (NN theorem) (NN prover)))))))))) (. .))
(S (NP (PRP We)) (VP (VBP use) (NP (NN refinement) (NNS types)) (S (VP (TO to) (VP (VB specify) (NP (NN correctness) (NNS properties)) (, ,) (S (NP (NNP Haskell) (NNS terms)) (VP (TO to) (VP (VB express) (S (NP (NML (NNS proofs) (CC and) (NN Liquid)) (NNP Haskell)) (VP (TO to) (VP (VB check) (NP (NP (NN correctness)) (PP (IN of) (NP (NNS proofs)))))))))))))) (. .))
(S (ADVP (RB First)) (, ,) (NP (PRP we)) (VP (VBP specify) (CC and) (VBP prove) (SBAR (IN that) (S (NP (NP (DT a) (NN class)) (PP (IN of) (NP (NN monoid) (NNS morphisms)))) (VP (MD can) (VP (VB be) (VP (VBN parallelized) (PP (IN via) (NP (NN parallel) (NN monoid) (NN concatenation))))))))) (. .))
(S (ADVP (RB Then)) (, ,) (NP (PRP we)) (VP (VBP encode) (NP (NN string) (NN matching)) (PP (IN as) (NP (DT a) (NN morphism) (S (VP (TO to) (VP (VB get) (NP (DT a) (ADJP (RB provably) (JJ correct)) (JJ parallel) (NN transformation)))))))) (. .))
(S (NP (PRP$ Our) (NN 1839LoC) (NN prototype) (NN proof)) (VP (VBZ shows) (SBAR (IN that) (S (NP (NN Liquid) (NNP Haskell)) (VP (MD can) (VP (VB be) (VP (VBN used) (PP (IN as) (NP (NP (DT a) (ADJP (RB fully) (JJ expressive)) (NN theorem) (NN prover)) (PP (IN on) (NP (JJ realistic) (NNP Haskell) (NNS implementations))))))))))) (. .))
