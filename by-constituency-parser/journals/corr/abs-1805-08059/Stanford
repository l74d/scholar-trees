(S (NP-TMP (NP (CD One) (NNP Monad)) (SBAR (S (VP (TO to) (VP (VB Prove) (NP (PRP Them))))))) (NP (DT All)) (VP (VBZ is) (NP (NP (NP (DT a) (JJ modern) (NN fairy) (NN tale)) (PP (IN about) (NP (NN curiosity) (CC and) (NN perseverance)))) (, ,) (NP (NP (CD two) (JJ important) (NNS properties)) (PP (IN of) (NP (DT a) (JJ successful) (NN PhD) (NN student)))))) (. .))
(S (NP (PRP We)) (VP (VBP follow) (NP (DT the) (NN PhD) (NN student) (NNP Mona)) (PP (IN on) (NP (NP (PRP$ her) (NN adventure)) (PP (IN of) (S (VP (VBG proving) (NP (NNS properties)) (PP (IN about) (NP (NP (NNP Haskell) (NNS programs)) (PP (IN in) (NP (DT the) (NN proof) (NN assistant) (NNP Coq))))))))))) (. .))
(S (PP (IN On) (NP (DT the) (CD one) (NN hand))) (, ,) (PP (IN as) (NP (NP (DT a) (NN PhD) (NN student)) (PP (IN in) (NP (NN computer) (NN science))))) (NP (NNP Mona)) (VP (VBZ observes) (NP (NP (DT an) (VBG increasing) (NN demand)) (PP (IN for) (NP (JJ correct) (NN software) (NNS products))))) (. .))
(S (PP (IN In) (ADJP (JJ particular))) (, ,) (SBAR (IN because) (FRAG (PP (IN of) (NP (NP (DT the) (JJ large) (NN amount)) (PP (IN of) (NP (VBG existing) (NN software))))))) (, ,) (S (VP (VBG verifying) (NP (JJ existing) (NN software) (NNS products)))) (VP (VBZ becomes) (ADJP (RBR more) (JJ important))) (. .))
(S (NP (NP (VBG Verifying) (NNS programs)) (PP (IN in) (NP (DT the) (JJ functional) (NML (NN programming) (NN language)) (NNP Haskell)))) (VP (VBZ is) (NP (DT no) (NN exception))) (. .))
(S (PP (IN On) (NP (DT the) (JJ other) (NN hand))) (, ,) (NP (NNP Mona)) (VP (VBZ is) (ADJP (JJ delighted) (S (VP (TO to) (VP (VB see) (SBAR (S (NP (NP (DT that) (NNS communities)) (PP (IN in) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NN theorem) (NN proving)))))) (VP (VBP are) (VP (VBG becoming) (ADJP (JJ popular))))))))))) (. .))
(S (ADVP (RB Thus)) (, ,) (NP (NNP Mona)) (VP (VBZ sets) (PRT (RP out)) (S (VP (TO to) (VP (VB learn) (NP (NP (JJR more) (UCP (PP (IN about) (NP (DT the) (JJ interactive) (NML (NN theorem) (NN prover)) (NNP Coq))) (CC and) (VP (VBG verifying) (NP (NNP Haskell)))) (NNS programs)) (PP (IN in) (NP (NNP Coq)))))))) (. .))
(S (S (VP (TO To) (VP (VB prove) (NP (NNS properties)) (PP (IN about) (NP (NP (DT a) (NNP Haskell) (NN function)) (PP (IN in) (NP (NNP Coq)))))))) (, ,) (NP (NNP Mona)) (VP (VBZ has) (S (VP (TO to) (VP (VB translate) (NP (DT the) (NN function)) (PP (IN into) (NP (NNP Coq) (NN code))))))) (. .))
(S (SBAR (IN As) (S (S (NP (NNP Coq) (NNS programs)) (VP (VBP have) (S (VP (TO to) (VP (VB be) (ADJP (JJ total))))))) (CC and) (S (NP (NNP Haskell) (NNS programs)) (VP (VBP are) (ADVP (RB often)) (RB not))))) (, ,) (NP (NNP Mona)) (VP (VBZ has) (S (VP (TO to) (VP (VB model) (NP (NN partiality)) (ADVP (RB explicitly)) (PP (IN in) (NP (NNP Coq))))))) (. .))
(S (PP (IN In) (NP (NP (PRP$ her) (NN quest)) (PP (IN for) (NP (DT a) (NN solution))))) (NP (NNP Mona)) (VP (VBZ finds) (NP (NP (DT an) (JJ ancient) (NN manuscript)) (SBAR (WHNP (WDT that)) (S (VP (VBZ explains) (SBAR (WHADVP (WRB how)) (S (NP (NP (NNS properties)) (PP (IN about) (NP (NNP Haskell) (NNS functions)))) (VP (MD can) (VP (VB be) (VP (VBN proven) (PP (IN in) (NP (NP (DT the) (ADJP (JJ proof)) (NN assistant)) (NP (NNP Agda)))) (PP (IN by) (S (VP (VBG translating) (NP (NNP Haskell) (NNS programs)) (PP (IN into) (NP (JJ monadic) (NN Agda) (NNS programs)))))))))))))))) (. .))
(S (PP (IN By) (S (VP (VBG instantiating) (NP (DT the) (JJ monadic) (NN program)) (PP (IN with) (NP (DT a) (JJ concrete) (NN monad) (NN instance)))))) (NP (DT the) (NN proof)) (VP (MD can) (VP (VB be) (VP (VBN performed) (PP (IN in) (NP (CC either) (NP (DT a) (JJ total)) (CC or) (NP (DT a) (JJ partial) (NN setting))))))) (. .))
(S (NP (NNP Mona)) (VP (VBZ discovers) (SBAR (IN that) (S (NP (DT the) (VBN proposed) (NN transformation)) (VP (VBZ does) (RB not) (VP (VB work) (PP (IN in) (NP (NNP Coq))) (PP (IN due) (PP (IN to) (NP (NP (DT a) (NN restriction)) (PP (IN in) (NP (DT the) (NN termination) (NN checker))))))))))) (. .))
(S (PP (IN In) (NP (NN fact))) (NP (DT the) (NN transformation)) (VP (VBZ does) (RB not) (VP (VB work) (PP (IN in) (NP (NNP Agda))) (ADVP (RB anymore)) (ADVP (RB as) (RB well)) (, ,) (SBAR (IN as) (S (NP (NP (DT the) (NN termination) (NN checker)) (PP (IN in) (NP (NNP Agda)))) (VP (VBZ has) (VP (VBN been) (VP (VBN improved)))))))) (. .))
(S (NP (PRP We)) (VP (VBP follow) (NP (NP (NNP Mona)) (PP (IN on) (NP (DT an) (JJ educational) (NN journey)))) (PP (IN through) (NP (NP (DT the) (NN land)) (PP (IN of) (NP (NP (JJ functional) (NN programming)) (SBAR (WHADVP (WRB where)) (S (NP (PRP she)) (VP (VBZ learns) (PP (IN about) (NP (NP (NP (NNS concepts)) (PP (IN like) (NP (JJ free) (NNS monads) (CC and) (NNS containers)))) (CONJP (RB as) (RB well) (IN as)) (NP (NP (NNS basics) (CC and) (NNS restrictions)) (PP (IN of) (NP (NP (NN proof) (NNS assistants)) (PP (IN like) (NP (NNP Coq)))))))))))))))) (. .))
(S (S (NP (DT These) (NNS concepts)) (VP (VBP are) (ADJP (RB well) (HYPH -) (VBN known)) (ADVP (RB individually)))) (, ,) (CC but) (S (NP (PRP$ their) (NN interplay)) (VP (VBZ gives) (NP (NN rise)) (PP (IN to) (NP (NP (DT a) (NN solution)) (PP (IN for) (NP (NP (NNP Mona) (POS 's)) (NN problem))))) (PP (VBN based) (PP (IN on) (NP (NP (DT the) (ADJP (RB originally) (VBN proposed)) (JJ monadic) (NN tranformation)) (SBAR (WHNP (WDT that)) (S (VP (VBZ has) (RB not) (VP (VBN been) (VP (VBN presented) (ADVP (RB before)))))))))))) (. .))
(S (SBAR (WHADVP (WRB When)) (S (NP (NNP Mona)) (VP (VBZ starts) (S (VP (TO to) (VP (VB test) (NP (PRP$ her) (NN approach)) (PP (IN by) (S (VP (VBG proving) (NP (NP (DT a) (NN statement)) (RB about) (NP (JJ simple) (NNP Haskell) (NNS functions)))))))))))) (, ,) (NP (PRP she)) (VP (VBZ realizes) (SBAR (IN that) (S (NP (PRP$ her) (NN approach)) (VP (VBZ has) (NP (NP (DT an) (JJ additional) (NN advantage)) (PP (IN over) (NP (NP (DT the) (JJ original) (NN idea)) (PP (IN in) (NP (NNP Agda)))))))))) (. .))
(S (NP (NP (NNP Mona) (POS 's)) (JJ final) (NN solution)) (VP (CONJP (RB not) (RB only)) (VP (VBZ works) (PP (IN for) (NP (DT a) (JJ specific) (NN monad) (NN instance)))) (CC but) (ADVP (RB even)) (VP (VBZ allows) (S (NP (PRP her)) (VP (TO to) (VP (VB prove) (NP (NML (NN monad) (HYPH -) (JJ generic)) (NNS properties))))))) (. .))
(S (PP (RB Instead) (IN of) (S (VP (VBG proving) (NP (NNS properties)) (PP (IN over) (CC and) (IN over) (PP (ADVP (RB again)) (IN for) (NP (JJ specific) (NN monad) (NNS instances))))))) (NP (PRP she)) (VP (VBZ is) (ADJP (JJ able) (S (VP (TO to) (VP (VB prove) (NP (NP (NNS properties)) (SBAR (WHNP (WDT that)) (S (VP (VBP hold) (PP (IN for) (NP (DT all) (NNS monads))) (ADJP (JJ representable) (PP (IN by) (NP (NP (DT a) (ADJP (NP (NN container)) (HYPH -) (VBN based)) (NN instance)) (PP (IN of) (NP (DT the) (JJ free) (NN monad))))))))))))))) (. .))
(S (PP (IN In) (NP (NN order) (S (VP (TO to) (VP (VB strengthen) (NP (PRP$ her) (NN confidence)) (PP (IN in) (NP (NP (DT the) (NN practicability)) (PP (IN of) (NP (PRP$ her) (NN approach)))))))))) (, ,) (NP (NNP Mona)) (VP (VBZ evaluates) (NP (PRP$ her) (NN approach)) (PP (IN in) (NP (NP (DT a) (NN case) (NN study)) (SBAR (WHNP (WDT that)) (S (VP (VBZ compares) (NP (NP (CD two) (NNS implementations)) (PP (IN for) (NP (NNS queues)))))))))) (. .))
(S (PP (IN In) (NP (NN order) (S (VP (TO to) (VP (VB share) (NP (DT the) (NNS results)) (PP (IN with) (NP (JJ other) (JJ functional) (NNS programmers)))))))) (NP (DT the) (NN fairy) (NN tale)) (VP (VBZ is) (ADJP (JJ available) (PP (IN as) (NP (DT a) (JJ literate) (NNP Coq) (NN file))))) (. .))
(S (SBAR (IN If) (S (NP (PRP you)) (VP (VP (VBP are) (NP (NP (DT a) (NN citizen)) (PP (IN of) (NP (NP (DT the) (NN land)) (PP (IN of) (NP (JJ functional) (NN programming))))))) (CC or) (VP (VBP are) (ADJP (ADVP (IN at) (RBS least)) (JJ familiar) (PP (IN with) (NP (PRP$ its) (NNS customs))))) (, ,) (VP (VBD had) (NP (NP (DT a) (NN journey)) (SBAR (WHNP (WDT that)) (S (VP (VBD involved) (NP (NN reasoning)) (PP (IN about) (NP (NP (JJ functional) (NNS programs)) (PP (IN of) (NP (PRP$ your) (JJ own)))))))))) (, ,) (CC or) (VP (VBP are) (ADVP (RB just) (NP (DT a) (JJ curious) (NN soul))) (VP (VBG looking) (PP (IN for) (NP (NP (DT the) (JJ next) (NN story)) (PP (IN about) (NP (NNS monads) (CC and) (NNS proofs)))))))))) (, ,) (ADVP (RB then)) (NP (DT this) (NN tale)) (VP (VBZ is) (PP (IN for) (NP (PRP you)))) (. .))
