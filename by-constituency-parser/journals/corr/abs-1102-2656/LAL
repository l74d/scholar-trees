(S (PP (IN For) (NP (NP (DT the) (JJ lambda-calculus)) (PP (IN with) (NP (NN letrec))))) (NP (PRP we)) (VP (VBP develop) (NP (NP (DT an) (NN optimisation)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ is) (VP (VBN based) (PP (IN on) (NP (NP (DT the) (NN contraction)) (PP (IN of) (NP (NP (DT a) (JJ certain) (NN class)) (PP (IN of) (NP (NN 'future) (POS ›) (PRN (-LRB- -LRB-) (ADVP (RB also)) (: :) (ADJP (JJ virtual)) (-RRB- -RRB-)) (NNS redexes))))))))))))) (. .))
(S (PP (IN In) (NP (NP (DT the) (NN implementation)) (PP (IN of) (NP (JJ functional) (NN programming) (NNS languages))))) (NP (NP (PRP it))) (VP (VBZ is) (NP (JJ common) (NN practice)) (S (VP (TO to) (VP (VB perform) (NP (NNS beta-reductions)) (PP (IN at) (NP (JJ compile) (NN time))) (SBAR (WHADVP (WRB whenever)) (FRAG (ADJP (JJ possible)))) (SBAR (IN in) (NN order) (S (VP (TO to) (VP (VB produce) (NP (NP (NN code)) (SBAR (WHNP (WDT that)) (S (VP (VBZ requires) (NP (JJR fewer) (NNS reductions)) (PP (IN at) (NP (NN run) (NN time))))))))))))))) (. .))
(S (NP (DT This)) (VP (VP (VBZ is) (, ,) (ADVP (RB however)) (, ,) (PP (IN in) (NP (NN principle))) (VP (VBD limited) (PP (TO to) (NP (NP (NP (VB redexes)) (CC and) (NP (VBN created) (NNS redexes))) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (ADJP (ADJP (JJ 'visible)) ('' ›)) (PRN (-LRB- -LRB-) (PP (IN in) (NP (DT the) (NN sense) (SBAR (IN that) (S (NP (PRP they)) (VP (MD can) (VP (VB be) (VP (VBN contracted) (PP (IN without) (NP (NP (DT the) (NN need)) (PP (IN for) (NP (VBG unsharing)))))))))))) (-RRB- -RRB-))))))))) (, ,) (CC and) (VP (MD can) (RB not) (ADVP (RB generally)) (VP (VB be) (VP (VBN extended) (PP (TO to) (NP (NP (VB redexes)) (SBAR (WHNP (DT that)) (S (VP (VBP are) (VP (VBN concealed) (PP (IN by) (NP (NP (VBG sharing) (NNS constructs)) (PP (JJ such) (IN as) (NP (NN letrec))))))))))))))) (. .))
(S (PP (IN In) (NP (NP (DT the) (NN case)) (PP (IN of) (NP (NN recursion))))) (, ,) (NP (VBD concealed) (NNS redexes)) (VP (VP (VB become) (ADJP (JJ visible)) (PP (ADVP (RB only)) (IN after) (NP (NP (NNS unwindings)) (PP (IN during) (NP (NN evaluation)))))) (, ,) (CC and) (ADVP (RB then)) (VP (VB have) (S (VP (TO to) (VP (VB be) (VP (VBN contracted) (ADVP (NN time) (CC and) (RB again)))))))) (. .))
(S (NP (PRP We)) (VP (VBP observe) (SBAR (DT that) (S (PP (IN in) (NP (DT some) (NNS cases))) (NP (JJ such) (NNS redexes)) (VP (VBP exhibit) (NP (NP (DT a) (JJ certain) (NN form)) (PP (IN of) (NP (JJ repetitive) (NN behaviour)))) (PP (IN at) (NP (JJ run) (NN time))))))) (. .))
(S (NP (PRP We)) (VP (VBP describe) (NP (NP (DT an) (NN analysis)) (PP (IN for) (S (VP (VBG identifying) (NP (NP (NNS binders)) (SBAR (WHNP (WDT that)) (S (VP (VP (VBP give) (NP (NN rise)) (PP (TO to) (NP (JJ such) (JJ repetitive) (NN reduction) (NNS patterns)))) (, ,) (CC and) (VP (VB eliminate) (NP (PRP them)) (PP (IN by) (NP (NP (DT a) (NN sort)) (PP (IN of) (NP (JJ predictive) (NN contraction))))))))))))))) (. .))
(S (ADVP (RB Thereby)) (NP (DT these) (NNS binders)) (VP (VBP are) (VP (VP (VBN lifted) (PP (IN out) (PP (IN of) (NP (JJ recursive) (NNS positions))))) (CC or) (VP (VBD eliminated) (ADVP (RB altogether))) (, ,) (S (PP (IN as) (NP (DT a) (NN result))) (VP (VBG alleviating) (NP (NP (DT the) (NN amount)) (PP (IN of) (NP (NNS beta-reductions))) (VP (VBN required) (PP (IN for) (NP (DT each) (JJ recursive) (NN iteration))))))))) (. .))
(S (NP (DT Both) (PRP$ our) (NN analysis) (CC and) (NN simplification)) (VP (VBP are) (ADJP (JJ suitable) (S (VP (TO to) (VP (VB be) (VP (VBN integrated) (PP (IN into) (NP (NP (VBG existing) (NNS compilers)) (PP (IN for) (NP (JJ functional) (NN programming) (NNS languages))))) (PP (IN as) (NP (DT an) (JJ additional) (NN optimisation) (NN phase))))))))) (. .))
(S (PP (IN With) (NP (DT this) (NN work))) (NP (PRP we)) (VP (VBP hope) (S (VP (TO to) (VP (VB contribute) (PP (TO to) (S (VP (VBG increasing) (NP (NP (DT the) (NN efficiency)) (PP (IN of) (S (VP (VBG executing) (NP (NP (NNS programs)) (VP (VBN written) (PP (IN in) (NP (JJ such) (NNS languages)))))))))))))))) (. .))
