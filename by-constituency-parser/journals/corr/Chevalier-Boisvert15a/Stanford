(SINV (ADVP (RB Dynamically)) (VP (VBN typed) (NP (NP (NN programming) (NNS languages)) (PP (JJ such) (IN as) (NP (NP (NN Python)) (CC and) (NP (NNP JavaScript)))))) (VP (VBP defer)) (NP (NP (NN type)) (VP (VBG checking) (S (VP (TO to) (VP (VB run) (NP (NN time))))))) (. .))
(S (NP (NNP VM) (NNS implementations)) (VP (MD can) (VP (VB improve) (NP (NN performance)) (PP (IN by) (S (VP (VBG eliminating) (NP (JJ redundant) (NML (JJ dynamic) (NN type)) (NNS checks))))))) (. .))
(S (ADVP (RB However)) (, ,) (NP (NML (NN type) (NN inference)) (NNS analyses)) (VP (VP (VBP are) (ADJP (RB often) (JJ costly))) (CC and) (VP (VBP involve) (NP (NP (NNS tradeoffs)) (PP (IN between) (NP (NP (NN compilation) (NN time)) (CC and) (NP (VBG resulting) (NN precision))))))) (. .))
(S (NP (DT This)) (VP (VBZ has) (NP (NN lead)) (PP (IN to) (NP (NP (DT the) (NN creation)) (PP (IN of) (NP (ADJP (RB increasingly) (JJ complex)) (JJ multi-tiered) (NNP VM) (NNS architectures)))))) (. .))
(S (NP (NP (NNP Lazy)) (NP (JJ basic) (NN block) (NN versioning))) (VP (VBZ is) (NP (NP (DT a) (JJ simple) (NML (NN JIT) (NN compilation)) (NN technique)) (SBAR (WHNP (WDT which)) (S (ADVP (RB effectively)) (VP (VBZ removes) (NP (JJ redundant) (NN type) (NNS checks)) (PP (IN from) (NP (JJ critical) (NN code) (NNS paths)))))))) (. .))
(S (NP (DT This) (JJ novel) (NN approach)) (ADVP (RB lazily)) (VP (VBZ generates) (NP (NP (ADJP (NN type) (HYPH -) (VBN specialized)) (NNS versions)) (PP (IN of) (NP (NP (JJ basic) (NNS blocks)) (PP (IN on) (HYPH -) (NP (DT the) (HYPH -) (NN fly)))))) (PP (IN while) (S (VP (VBG propagating) (NP (ADJP (NP (NN context)) (HYPH -) (JJ dependent)) (NN type) (NN information)))))) (. .))
(SINV (S (NP (DT This) (NN approach)) (VP (VBZ does) (RB not) (VP (VB require) (NP (NP (DT the) (NN use)) (PP (IN of) (NP (JJ costly) (NN program) (NNS analyses))))))) (, ,) (VP (VBZ is) (RB not) (VP (VBN restricted) (PP (IN by) (NP (DT the) (NN precision))))) (NP (NP (NNS limitations)) (PP (IN of) (NP (JJ traditional) (NN type) (NNS analyses)))) (. .))
(S (NP (DT This) (NN paper)) (VP (VBZ extends) (NP (NP (JJ lazy) (JJ basic) (NN block)) (VP (VBG versioning) (PP (IN to) (NP (NML (S (VP (VB propagate) (NP (NN type) (NN information)) (ADVP (RB interprocedurally)) (, ,) (PP (IN across) (NP (NN function)))))) (NN call) (NNS boundaries)))))) (. .))
(S (NP (NP (PRP$ Our) (NN implementation)) (PP (IN in) (NP (DT a) (NML (NNP JavaScript) (NNP JIT)) (NN compiler)))) (VP (VBZ shows) (SBAR (IN that) (S (PP (IN across) (NP (CD 26) (NNS benchmarks))) (, ,) (NP (JJ interprocedural) (JJ basic) (NN block) (NN versioning)) (VP (VBZ eliminates) (NP (NP (JJR more) (NML (NN type) (NN tag)) (NNS tests)) (PP (IN on) (NP (ADJP (JJ average) (PP (IN than) (SBAR (WHNP (WP what)) (S (VP (VBZ is) (ADJP (JJ achievable) (PP (IN with) (NP (NN static) (NN type) (NN analysis)))) (PP (IN without) (S (VP (VBG resorting) (PP (IN to) (NP (NN code))))))))))) (NNS transformations)))))))) (. .))
(S (PP (IN On) (ADJP (JJ average))) (, ,) (NP (NP (CD 94.3) (NN %)) (PP (IN of) (NP (NML (NN type) (NN tag)) (NNS tests)))) (VP (VBP are) (VP (VBN eliminated) (, ,) (S (VP (VBG yielding) (NP (NP (NNS speedups)) (PP (IN of) (NP (QP (RB up) (IN to) (CD 56)) (NN %)))))))) (. .))
(S (NP (PRP We)) (ADVP (RB also)) (VP (VBP show) (SBAR (IN that) (S (NP (PRP$ our) (NN implementation)) (VP (VBZ is) (ADJP (JJ able) (S (VP (TO to) (VP (VB outperform) (NP (NNP Truffle) (HYPH /) (NNP JS)) (PP (PP (IN on) (NP (JJ several) (NNS benchmarks))) (, ,) (CC both) (PP (IN in) (NP (NP (NNS terms)) (PP (IN of) (NP (NN execution) (NML (NN time) (CC and) (NN compilation)) (NN time)))))))))))))) (. .))
