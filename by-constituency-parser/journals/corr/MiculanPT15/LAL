(S (NP (JJ Transactional) (NN memory)) (VP (VBZ has) (VP (VBN arisen) (PP (IN as) (NP (NP (DT a) (JJ good) (NN way)) (PP (IN for) (S (VP (VBG solving) (NP (NP (JJ many)) (PP (IN of) (NP (NP (DT the) (NNS issues)) (PP (IN of) (NP (JJ lock-based) (NN programming))))))))))))) (. .))
(S (ADVP (RB However)) (, ,) (NP (JJS most) (NNS implementations)) (VP (VBP admit) (NP (NP (JJ isolated) (NNS transactions)) (ADVP (RB only)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (RB not) (ADJP (JJ adequate)) (SBAR (WHADVP (WRB when)) (S (NP (PRP we)) (VP (VBP have) (S (VP (TO to) (VP (VB coordinate) (NP (NN communicating) (NNS processes))))))))))))) (. .))
(S (S (PP (TO To) (NP (DT this) (NN end))) (, ,) (PP (IN in) (NP (DT this) (NN paper))) (NP (PRP we)) (VP (JJ present) (NP (NP (NNP OCTM)) (, ,) (NP (NP (DT an) (JJ Haskell-like) (NN language)) (PP (IN with) (NP (NP (JJ open) (NNS transactions)) (PP (IN over) (NP (VBN shared) (JJ transactional) (NN memory))))))))) (: :) (S (NP (NNS processes)) (VP (MD can) (VP (VB join) (NP (NNS transactions)) (PP (IN at) (NP (NN runtime))) (PP (ADVP (RB just)) (IN by) (S (VP (VBG accessing) (PP (TO to) (NP (VBN shared) (NNS variables))))))))) (. .))
(S (S (ADVP (RB Thus)) (NP (DT a) (NN transaction)) (VP (MD can) (VP (VB co-operate) (PP (IN with) (NP (DT the) (NN environment))) (PP (IN through) (NP (VBN shared) (NNS variables)))))) (, ,) (CC but) (S (SBAR (IN if) (S (NP (PRP it)) (VP (VBZ is) (ADJP (JJ rolled-back))))) (, ,) (ADVP (RB also)) (NP (NP (DT all) (PRP$ its) (NNS effects)) (PP (IN on) (NP (DT the) (NN environment)))) (VP (VBP are) (VP (VBN retracted)))) (. .))
(S (PP (IN For) (S (VP (VBG proving) (NP (NP (DT the) (JJ expressive) (NN power)) (PP (IN of) (NP (NNP TCCS))))))) (NP (PRP we)) (VP (VBP give) (NP (NP (DT an) (NN implementation)) (PP (IN of) (NP (NP (NNP TCCS)) (, ,) (NP (NP (DT a) (JJ CCS-like) (NN calculus)) (PP (IN with) (NP (JJ open) (NNS transactions)))))))) (. .))
