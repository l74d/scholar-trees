(S (NP (PRP We)) (VP (VBP present) (NP (NP (DT a) (JJ new) (NN type) (NN system)) (VP (VBG combining) (NP (NP (NN occurrence) (NN typing)) (, ,) (VP (ADVP (RB previously)) (VBN used) (S (VP (TO to) (VP (VB type) (NP (NN check) (NNS programs)) (PP (IN in) (NP (NP (JJ dynamically-typed) (NNS languages)) (PP (JJ such) (IN as) (NP (NNP Racket) (, ,) (NNP JavaScript) (, ,) (CC and) (NP (NNP Ruby)))))))))) (, ,)) (PP (IN with) (NP (JJ dependent) (NN refinement) (NNS types)))))) (. .))
(S (NP (PRP We)) (VP (VBP demonstrate) (SBAR (IN that) (S (NP (NP (DT the) (NN addition)) (PP (IN of) (NP (NN refinement) (NNS types)))) (VP (VBZ allows) (NP (NP (DT the) (NN integration)) (PP (IN of) (NP (NP (JJ arbitrary) (JJ solver-backed) (VBG reasoning)) (PP (IN about) (NP (JJ logical) (NNS propositions))) (PP (IN from) (NP (JJ external) (NNS theories)))))))))) (. .))
(S (S (PP (IN By) (S (VP (VBG building) (PP (IN on) (NP (NN occurrence) (NN typing)))))) (, ,) (NP (PRP we)) (VP (MD can) (VP (VB add) (NP (PRP$ our) (VBN enriched) (NN type) (NN system)) (PP (IN as) (NP (NP (DT an) (NN extension)) (PP (IN of) (NP (NNP Typed) (NNP Racket)))))))) (: â€”) (S (S (VP (VBG -adding) (NP (NN dependency) (CC and) (NN refinement)))) (VP (VBZ reuses) (NP (DT the) (VBG existing) (NN formalism)) (SBAR (IN while) (S (VP (VBG increasing) (NP (PRP$ its) (NN expressiveness))))))) (. .))
(S (NP (JJ Dependent) (NN refinement) (NNS types)) (VP (VBP allow) (S (NP (NNP Typed) (NNP Racket) (NNS programmers)) (VP (TO to) (VP (VB express) (NP (NP (JJ rich) (NN type) (NNS relationships)) (, ,) (VP (VBG ranging) (PP (PP (IN from) (NP (NP (NN data) (NN structure) (NNS invariants)) (PP (JJ such) (IN as) (NP (JJ red-black) (JJ tree) (NN balance))))) (PP (TO to) (NP (NP (NNS preconditions)) (PP (JJ such) (IN as) (NP (NN vector) (NNS bounds)))))))))))) (. .))
(S (NP (NNS Refinements)) (VP (VBP allow) (S (NP (NNS programmers)) (VP (TO to) (VP (VB embed) (NP (NP (DT the) (NNS propositions)) (SBAR (WHNP (WDT that)) (S (NP (NP (VBP occurrence) (VBG typing)) (PP (IN in) (NP (NNP Typed) (NNP Racket)))) (ADVP (RB already)) (VP (NNS reasons) (PP (IN about)))))) (PP (IN into) (NP (PRP$ their) (NNS types))))))) (. .))
(S (ADVP (RB Further)) (, ,) (S (VP (VBG extending) (NP (NN occurrence) (VBG typing)) (PP (TO to) (NP (NNS refinements))))) (VP (VBZ allows) (S (NP (PRP us)) (VP (TO to) (VP (VB make) (S (NP (DT the) (JJ underlying) (NN formalism)) (ADJP (ADJP (NN simpler)) (CC and) (ADJP (RBR more) (JJ powerful)))))))) (. .))
(S (PP (IN In) (NP (NP (NN addition)) (PP (TO to) (S (VP (VBG presenting) (NP (NP (DT the) (NN design)) (PP (IN of) (NP (PRP$ our) (NN system))))))))) (, ,) (NP (PRP we)) (VP (VP (VBP present) (NP (NP (DT a) (JJ formal) (NN model)) (PP (IN of) (NP (DT the) (NN system))))) (, ,) (VP (VB show) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB integrate) (NP (PRP it)) (PP (IN with) (NP (NP (NNS theories)) (PP (IN over) (NP (DT both) (NP (JJ linear) (NN arithmetic)) (CC and) (NP (NNS bitvectors))))))))))) (, ,) (CC and) (VP (VB evaluate) (NP (DT the) (NN system)) (PP (IN in) (NP (NP (DT the) (NN context)) (PP (IN of) (NP (DT the) (JJ full) (NNP Typed) (NNP Racket) (NN implementation))))))) (. .))
(S (ADVP (RB Specifically)) (, ,) (NP (PRP we)) (VP (VP (VBP take) (NP (JJ safe) (NN vector) (NN access)) (PP (IN as) (NP (DT a) (NN case) (NN study)))) (, ,) (CC and) (VP (VB examine) (NP (NP (DT all) (NN vector) (VBZ accesses)) (PP (IN in) (NP (NP (DT a) (ADJP (CD 56,000) (NN line)) (NN corpus)) (PP (IN of) (NP (NNP Typed) (NNP Racket) (NNS programs)))))))) (. .))
(S (S (NP (PRP$ Our) (NN system)) (VP (VBZ is) (ADJP (JJ able) (S (VP (TO to) (VP (VB prove) (SBAR (DT that) (S (NP (NP (CD 50) (NN %)) (PP (IN of) (NP (DT these)))) (VP (VP (VBP are) (ADJP (JJ safe))) (PP (IN with) (NP (DT no) (JJ new) (NN annotation)))))))))))) (, ,) (CC and) (S (PP (IN with) (NP (DT a) (JJ few) (NNS annotations) (CC and) (NNS modifications))) (, ,) (NP (PRP we)) (VP (MD can) (VP (VB capture) (NP (QP (RB close) (TO to) (CD 80)) (NN %))))) (. .))
