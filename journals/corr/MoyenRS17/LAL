(S (NP (NP (JJ Several) (NNS techniques)) (PP (IN for) (NP (NN analysis) (CC and) (NNS transformations)))) (VP (VBP are) (VP (VBN used) (PP (IN in) (NP (NNS compilers))))) (. .))
(S (PP (IN Among) (NP (PRP them))) (, ,) (NP (NP (DT the) (NN peeling)) (PP (IN of) (NP (NNS loops))) (PP (IN for) (S (VP (VBG hoisting) (NP (NNS quasi-invariants)))))) (VP (MD can) (VP (VB be) (VP (VBN used) (S (VP (TO to) (VP (VP (VB optimize) (NP (JJ generated) (NN code))) (, ,) (CC or) (VP (ADVP (RB simply)) (JJ ease) (NP (NP (NNS developers) (POS â€º)) (NNS lives))))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (, ,) (NP (PRP we)) (VP (VBP introduce) (NP (NP (DT a) (JJ new) (NN concept)) (PP (IN of) (NP (NN dependency) (NN analysis))) (VP (VBN borrowed) (PP (IN from) (NP (NP (DT the) (NN field)) (PP (IN of) (NP (NP (NNP Implicit) (NNP Computational) (NNP Complexity)) (PRN (-LRB- -LRB-) (NP (NNP ICC)) (-RRB- -RRB-)))))))) (, ,) (S (VP (VBG allowing) (S (VP (TO to) (VP (VB work) (PP (IN with) (NP (NP (JJ composed) (NNS statements)) (VP (VBN called) (S (NP (NNS Chunks)))))) (S (VP (TO to) (VP (VB detect) (NP (JJR more) (NNS quasi-invariants))))))))))) (. .))
(S (PP (VBN Based) (PP (IN on) (NP (NP (DT an) (NN optimization) (NN idea)) (VP (VBN given) (PP (IN on) (NP (DT a) (NNP WHILE) (NN language))))))) (, ,) (NP (PRP we)) (VP (VBP provide) (NP (NP (DT a) (NN transformation) (SYM method)) (PRN (: -) (S (VP (VBG reusing) (NP (NNP ICC) (NNS concepts) (CC and) (NNS techniques)))) (: -))) (PP (TO to) (NP (NNS compilers)))) (. .))
(S (NP (DT This) (JJ new) (NN analysis)) (VP (VP (VBZ computes) (NP (DT an) (NN invariance) (NN degree)) (PP (IN for) (NP (NP (DT each) (NN statement)) (CC or) (NP (NP (NNS chunks)) (PP (IN of) (NP (NNS statements)))))) (PP (IN by) (S (VP (VBG building) (NP (NP (DT a) (JJ new) (NN kind)) (PP (IN of) (NP (NN dependency) (NN graph)))))))) (, ,) (VP (VBZ finds) (NP (NP (DT the) (ADJP (JJ maximum) (CC or) (JJS worst)) (NN dependency) (NN graph)) (PP (IN for) (NP (NNS loops))))) (, ,) (CC and) (VP (VBZ recognizes) (SBAR (IN if) (S (NP (DT an) (JJ entire) (NN block)) (VP (VP (VBZ is) (ADJP (JJ Quasi-Invariant))) (CC or) (RB not)))))) (. .))
(S (S (NP (DT This) (NN block)) (VP (MD could) (VP (VB be) (NP (DT an) (JJ inner) (NN loop))))) (, ,) (CC and) (S (PP (IN in) (NP (DT that) (NN case))) (NP (NP (DT the) (JJ computational) (NN complexity)) (PP (IN of) (NP (DT the) (JJ overall) (NN program)))) (VP (MD can) (VP (VB be) (VP (VBN decreased))))) (. .))
(S (NP (PRP We)) (ADVP (RB already)) (VP (VBD implemented) (NP (NP (DT a) (NN proof)) (PP (IN of) (NP (NN concept)))) (PP (IN on) (NP (DT a) (NN toy) (NNP C) (VBZ parser) (CD 1))) (VP (NN analysing) (CC and) (VBG transforming) (NP (DT the) (NNP AST) (NN representation)))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (, ,) (NP (PRP we)) (VP (VP (VBP introduce) (NP (NP (DT the) (NN theory)) (PP (IN around) (NP (DT this) (NN concept))))) (CC and) (VP (VB present) (NP (NP (DT a) (NN prototype) (NN analysis) (NN pass)) (VP (VBN implemented) (PP (IN on) (NP (NNP LLVM))))))) (. .))
(S (PP (IN In) (NP (DT a) (ADJP (RB very) (JJ near)) (NN future))) (, ,) (NP (PRP we)) (VP (MD will) (VP (VP (VB implement) (NP (DT the) (JJ corresponding) (NN transformation))) (CC and) (VP (VB provide) (NP (NNS benchmarks) (NNS comparisons))))) (. .))
