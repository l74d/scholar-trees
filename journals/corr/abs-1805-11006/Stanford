(S (NP (PRP We)) (VP (VBP present) (NP (NP (DT an) (NN implementation)) (PP (IN of) (NP (NP (DT the) (JJ relational) (NN programming) (NN language)) (VP (VBN miniKanren) (PP (IN as) (NP (NP (NP (DT a) (NN set)) (PP (IN of) (NP (NNS combinators)))) (CC and) (NP (NP (NN syntax) (NNS extensions)) (PP (IN for) (NP (NNP OCaml))))))))))) (. .))
(S (NP (NP (DT The) (JJ key) (NN feature)) (PP (IN of) (NP (PRP$ our) (NN approach)))) (VP (VBZ is) (NP (NP (JJ polymorphic) (NN unification)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (MD can) (VP (VB be) (VP (VBN used) (S (VP (TO to) (VP (VB unify) (NP (NP (NNS data) (NNS structures)) (PP (IN of) (NP (JJ arbitrary) (NNS types)))))))))))))) (. .))
(S (PP (IN In) (NP (NN addition))) (NP (PRP we)) (VP (VBP provide) (NP (DT a) (JJ useful) (NML (JJ generic) (NN programming)) (NN pattern)) (PP (IN to) (S (ADVP (RB systematically)) (VP (VP (VB develop) (NP (JJ relational) (NNS specifications)) (PP (IN in) (NP (DT a) (VBN typed) (NN manner)))) (, ,) (CC and) (VP (VB address) (NP (NP (DT the) (NN problem)) (PP (IN of) (NP (NP (NN integration)) (PP (IN of) (NP (JJ relational) (NNS subsystems)))))) (PP (IN into) (NP (JJ functional) (NNS applications)))))))) (. .))
