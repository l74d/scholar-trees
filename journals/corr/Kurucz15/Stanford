(S (NP (EX There)) (VP (VBP are) (NP (NP (CD two) (JJ known) (JJ general) (NNS results)) (PP (IN on) (NP (NP (NP (DT the) (JJ finite) (NN model) (NN property)) (-LRB- -LRB-) (NP (NN fmp)) (-RRB- -RRB-)) (PP (IN of) (NP (NNS commutators))) (PRN (-LRB- [) (NP (NP (NN L)) (, ,) (NP (NNP L'))) (-RRB- ]))))) (PRN (-LRB- -LRB-) (NP (NP (NP (JJ bimodal) (NNS logics)) (PP (IN with) (S (VP (VBG commuting))))) (CC and) (NP (ADJP (JJ confluent)) (NNS modalities))) (-RRB- -RRB-))) (. .))
(S (SBAR (IN If) (S (NP (NN L)) (VP (VBZ is) (ADJP (RB finitely) (JJ axiomatisable) (PP (IN by) (NP (JJ modal) (NNS formulas)))) (S (VP (VBG having) (NP (JJ universal) (NML (NML (NML (NNP Horn)) (ADVP (RB first))) (HYPH -) (NN order)) (NNS correspondents))))))) (, ,) (NP (RB then) (DT both) (NML (NML (-LRB- [) (NML (NN L)) (, ,) (NML (NNP K)) (-RRB- ])) (CC and) (NML (-LRB- [) (NML (NN L)) (, ,) (NML (NN S5)) (-RRB- ])))) (VP (VBP are) (VP (VBN determined) (PP (IN by) (NP (NP (NNS classes)) (PP (IN of) (NP (NP (NNS frames)) (SBAR (WHNP (WDT that)) (S (VP (VP (VBP admit) (NP (NN filtration))) (, ,) (CC and) (ADVP (RB so)) (VP (VBP have) (NP (DT the) (NN fmp)))))))))))) (. .))
(S (PP (IN On) (NP (DT the) (JJ negative) (NN side))) (, ,) (SBAR (IN if) (S (NP (DT both) (NNP L) (CC and) (NNP L')) (VP (VP (VBP are) (VP (VBN determined) (PP (IN by) (NP (JJ transitive) (NNS frames))))) (CC and) (VP (VBP have) (NP (NP (NNS frames)) (PP (IN of) (NP (NP (ADJP (RB arbitrarily) (JJ large)) (NN depth)) (, ,) (ADVP (RB then)))))) (PRN (-LRB- [) (NP (NN L)) (, ,) (NP (NNP L')) (-RRB- ]))))) (VP (VBZ does) (RB not) (VP (VB have) (NP (DT the) (NN fmp)))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (NP (PRP we)) (VP (VBP show) (SBAR (IN that) (S (NP (NP (NNS commutators)) (PP (IN with) (NP (DT a) (ADJP (`` `) (RB weakly) (VBN connected) ('' ')) (NN component)))) (ADVP (RB often)) (VP (VBP lack) (NP (DT the) (NN fmp)))))) (. .))
(S (S (NP (PRP$ Our) (NNS results)) (VP (VBP imply) (SBAR (IN that) (S (NP (DT the) (JJ above) (JJ positive) (NN result)) (VP (VBZ does) (RB not) (VP (VB generalise) (PP (IN to) (NP (ADJP (RB universally) (JJ axiomatisable)) (NN component) (NNS logics))))))))) (, ,) (CC and) (S (NP (NP (RB even) (NNS commutators)) (PP (IN without) (NP (NP (`` `) (JJ transitive) ('' ') (NNS components)) (PP (JJ such) (PP (IN as))))) (PRN (-LRB- [) (NP (NP (NNP K.) (CD 3)) (, ,) (NP (NNP K))) (-RRB- ]))) (VP (MD can) (VP (VB lack) (NP (DT the) (NN fmp))))) (. .))
(S (NP (PRP We)) (ADVP (RB also)) (VP (VBP generalise) (NP (DT the) (JJ above) (JJ negative) (NN result)) (PP (IN to) (NP (NP (NP (NNS cases)) (SBAR (WHADVP (WRB where)) (S (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NN component) (NNS logics)))) (VP (VBZ has) (NP (NP (NNS frames)) (PP (IN of) (NP (NN depth) (CD one)))) (ADVP (RB only)) (, ,) (PP (JJ such) (PP (IN as))) (PRN (-LRB- [) (NP (NN S4) (CD .3) (, ,) (NN S5)) (-RRB- ])))))) (CC and) (NP (NP (DT the) (JJ decidable) (NN product) (NN logic) (NN S4)) (NP (CD .3) (NN xS5)))))) (. .))
(S (NP (PRP We)) (ADVP (RB also)) (VP (VBP show) (NP (NNS cases)) (SBAR (WHADVP (WRB when)) (S (ADVP (RB already)) (NP (NP (NN half)) (PP (IN of) (NP (NN commutativity)))) (VP (VBZ is) (ADJP (JJ enough) (S (VP (TO to) (VP (VB force) (NP (JJ infinite) (NNS frames)))))))))) (. .))
