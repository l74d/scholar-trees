(S (NP (PRP We)) (VP (VBP introduce) (NP (NP (JJ Refinement) (NNP Reflection)) (, ,) (NP (NP (DT a) (JJ new) (NN framework)) (PP (IN for) (S (VP (VBG building) (NP (JJ SMT-based) (JJ deductive) (NNS verifiers)))))))) (. .))
(S (NP (DT The) (JJ key) (NN idea)) (VP (VBZ is) (S (VP (TO to) (VP (VB reflect) (NP (NP (DT the) (NN code)) (VP (VBG implementing) (NP (DT a) (JJ user-defined) (NN function)))) (PP (IN into) (NP (NP (DT the) (NN function) (POS 's)) (PRN (-LRB- -LRB-) (NN output) (-RRB- -RRB-)) (NN refinement) (NN type))))))) (. .))
(S (PP (IN As) (NP (DT a) (NN consequence))) (, ,) (PP (IN at) (NP (NP (NNS uses)) (PP (IN of) (NP (DT the) (NN function))))) (, ,) (NP (DT the) (NN function) (NN definition)) (VP (VBZ is) (VP (VBN instantiated) (PP (IN in) (NP (DT the) (NNP SMT) (NN logic))) (PP (IN in) (NP (NP (DT a) (JJ precise) (NN fashion)) (SBAR (WHNP (IN that)) (S (VP (VBZ permits) (NP (JJ decidable) (NN verification))))))))) (. .))
(S (NP (NN Reflection)) (VP (VBZ allows) (S (NP (DT the) (NN user)) (VP (TO to) (VP (VB write) (NP (NP (JJ equational) (NN proofs)) (PP (IN of) (NP (NNS programs)))) (PP (ADVP (RB just)) (IN by) (S (VP (VBG writing) (NP (JJ other) (NNS programs)) (S (VP (VBG using) (NP (JJ pattern-matching) (CC and) (NN recursion)) (S (VP (TO to) (VP (VB perform) (NP (NN case-splitting) (CC and) (NN induction)))))))))))))) (. .))
(S (ADVP (RB Thus)) (, ,) (PP (IN via) (NP (DT the) (JJ propositions-as-types) (NN principle))) (, ,) (NP (PRP we)) (VP (VBP show) (SBAR (DT that) (S (NP (NN reflection)) (VP (VBZ permits) (NP (NP (DT the) (NN specification)) (PP (IN of) (NP (JJ arbitrary) (JJ functional) (NN correctness) (NNS properties)))))))) (. .))
(S (ADVP (RB Finally)) (, ,) (NP (PRP we)) (VP (VBP introduce) (NP (NP (DT a) (NN proof-search) (NN algorithm)) (VP (VBN called) (S (NP (NP (NNP Proof)) (PP (IN by) (NP (NNP Logical) (NNP Evaluation)))))) (SBAR (WHNP (IN that)) (S (VP (VBZ uses) (NP (NP (NNS techniques)) (PP (IN from) (NP (NP (NN model) (NN checking)) (CC and) (NP (JJ abstract) (NN interpretation))))) (, ,) (S (VP (TO to) (VP (ADVP (RB completely)) (VB automate) (NP (JJ equational) (NN reasoning)))))))))) (. .))
(S (NP (PRP We)) (VP (VP (VBP have) (VP (VP (VBN implemented) (NP (NN reflection)) (PP (IN in) (NP (NNP Liquid) (NNP Haskell)))) (CC and) (VP (VBD used) (NP (PRP it)) (S (VP (TO to) (VP (VB verify) (SBAR (IN that) (S (NP (NP (DT the) (ADJP (RB widely) (JJ used)) (NNS instances)) (PP (IN of) (NP (DT the) (NNP Monoid) (, ,) (NNP Applicative) (, ,) (NNP Functor) (, ,) (CC and) (NNP Monad) (NNS typeclasses)))) (ADVP (RB actually)) (VP (VBP satisfy) (NP (NP (JJ key) (JJ algebraic) (NNS laws)) (VP (VBN required) (S (VP (TO to) (VP (VB make) (S (NP (DT the) (NNS clients)) (ADJP (JJ safe))))))))))))))))) (, ,) (CC and) (VP (VBP have) (VP (VBN used) (NP (NN reflection)) (S (VP (TO to) (VP (VB build) (NP (NP (DT the) (JJ first) (NN library)) (SBAR (WHNP (WDT that)) (S (ADVP (RB actually)) (VP (VBZ verifies) (NP (NP (NNS assumptions)) (PP (IN about) (NP (NN associativity) (CC and) (NN ordering))) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (ADJP (JJ crucial) (PP (IN for) (NP (JJ safe) (JJ deterministic) (NN parallelism)))))))))))))))))) (. .))
