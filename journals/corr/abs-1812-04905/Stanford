(S (NP (DT The) (NNP OCaml) (NN language)) (VP (VBZ comes) (PP (IN with) (NP (NP (NP (DT a) (NN facility)) (PP (IN for) (S (VP (VBG interfacing) (PP (IN with) (NP (NN C) (NN code))))))) (: --) (NP (NP (DT the) (JJ Foreign) (NN Function) (NN Interface)) (CC or) (NP (NN FFI)))))) (. .))
(S (NP (NP (DT The) (NNS primitives)) (PP (IN for) (S (VP (VP (VBG working) (PP (IN with) (NP (DT the) (NN OCaml) (NN runtime)))) (: --) (CC and) (VP (, ,) (PP (IN in) (ADJP (JJ particular))) (, ,) (PP (IN with) (NP (DT the) (NN garbage) (NN collector) (PRN (-LRB- -LRB-) (NP (NN GC)) (-RRB- -RRB-))))))))) (: --) (S (VP (VB strive) (PP (IN for) (NP (DT a) (JJ minimal) (NN overhead))))) (: :) (NP (PRP they)) (VP (VP (VBP avoid) (NP (JJ unnecessary) (NN work))) (CC and) (VP (VB allow) (PP (IN for) (NP (NNS calls))) (PP (IN to) (NP (NN C) (NN code))) (S (VP (TO to) (VP (VB be) (ADJP (RB very) (JJ cheap))))))) (. .))
(S (CC But) (NP (PRP they)) (VP (VBP are) (ADVP (RB also)) (ADJP (JJ hard) (S (VP (TO to) (VP (VB use) (ADVP (RB properly))))))) (. .))
(S (S (S (VP (VBG Satisfying) (NP (DT the) (NN GC) (NNS invariants)))) (VP (VBZ leads) (PP (IN to) (NP (JJ counter-intuitive) (NN C) (NN code))))) (CC and) (S (NP (EX there)) (VP (VBP are) (ADVP (RB hardly)) (NP (DT any) (NN safety) (NNS checks)) (S (VP (TO to) (VP (VB warn) (NP (DT the) (NN developer))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN work))) (, ,) (NP (PRP we)) (VP (VBP explore) (NP (CD two) (JJ complementary) (NNS approaches)) (S (VP (TO to) (VP (VB mitigate) (NP (DT these) (NNS issues)))))) (. .))
(S (FRAG (ADVP (RB First)) (, ,) (ADVP (RB simply)) (VP (VBG adding) (NP (DT an) (NN indirection)) (PP (IN to) (NP (DT the) (NN API))))) (S (VP (VBG manipulating) (S (NP (NN OCaml) (NNS values)) (VP (VB let) (S (NP (PRP us)) (VP (VB write) (NP (JJR safer) (NN code)) (S (ADJP (JJ amenable))) (PP (IN to) (NP (NP (JJ optional) (NN runtime) (NNS tests)) (SBAR (WHNP (WDT that)) (S (VP (VBP assert) (NP (NP (JJ proper) (NN use)) (PP (IN of) (NP (DT the) (NN API))))))))))))))) (. .))
(S (ADVP (RB Second)) (, ,) (NP (NP (DT a) (NN notion)) (PP (IN of) (NP (NP (NN region)) (PP (IN for) (NP (NP (VBG tracking) (NNS lifetimes)) (PP (IN of) (NP (NP (NN OCaml) (NNS values)) (PP (IN on) (NP (NN C) (NN side)))))))))) (VP (VB let) (S (NP (PRP us)) (VP (VB trade) (NP (DT some) (NN performance)) (PP (IN for) (NP (JJR simpler) (NN code)))))) (. .))
