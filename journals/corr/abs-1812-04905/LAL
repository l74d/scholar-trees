(S (NP (DT The) (NNP OCaml) (NN language)) (VP (VBZ comes) (PP (IN with) (NP (NP (NP (DT a) (NN facility)) (PP (IN for) (S (VP (VBG interfacing) (PP (IN with) (NP (NNP C) (NN code))))))) (: —) (NP (NP (DT the) (NNP Foreign) (NNP Function) (NNP Interface)) (CC or) (NP (NNP FFI)))))) (. .))
(S (S (NP (NP (DT The) (NNS primitives)) (PP (IN for) (S (VP (VBG working) (PP (PP (IN with) (NP (DT the) (NNP OCaml) (NN runtime))) (PRN (: —) (CC and) (, ,) (PP (IN in) (NP (JJ particular))) (, ,) (PP (IN with) (NP (NP (DT the) (NN garbage) (NN collector)) (PRN (-LRB- -LRB-) (NP (NNP GC)) (-RRB- -RRB-)))) (: —))))))) (VP (JJ strive) (PP (IN for) (NP (DT a) (JJ minimal) (NN overhead))))) (: :) (S (NP (PRP they)) (VP (VP (VBP avoid) (NP (JJ unnecessary) (NN work))) (CC and) (VP (VB allow) (SBAR (IN for) (S (NP (NP (NNS calls)) (PP (TO to) (NP (NNP C) (NN code)))) (VP (TO to) (VP (VB be) (ADJP (RB very) (JJ cheap))))))))) (. .))
(S (CC But) (NP (PRP they)) (VP (VBP are) (ADVP (RB also)) (ADJP (RB hard) (SBAR (S (VP (TO to) (VP (VB use) (ADVP (RB properly)))))))) (. .))
(S (S (S (VP (VBG Satisfying) (NP (DT the) (NNP GC) (NNS invariants)))) (VP (VBZ leads) (PP (TO to) (NP (JJ counter-intuitive) (NNP C) (NN code))))) (CC and) (S (NP (EX there)) (VP (VBP are) (NP (NP (RB hardly) (DT any) (NN safety) (NNS checks)) (SBAR (S (VP (TO to) (VP (VB warn) (NP (DT the) (NN developer))))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN work))) (, ,) (NP (PRP we)) (VP (VBP explore) (NP (NP (CD two) (JJ complementary) (NNS approaches)) (SBAR (S (VP (TO to) (VP (VB mitigate) (NP (DT these) (NNS issues)))))))) (. .))
(S (ADVP (RB First)) (, ,) (S (ADVP (RB simply)) (VBG adding) (NP (DT an) (NN indirection)) (PP (TO to) (NP (DT the) (NNP API))) (S (VP (NN manipulating) (NP (NNP OCaml) (VBZ values))))) (VP (VB let) (S (NP (PRP us)) (VP (VB write) (NP (NP (JJR safer) (NN code)) (ADJP (JJ amenable) (PP (TO to) (NP (NP (JJ optional) (NN runtime) (NNS tests)) (SBAR (WHNP (IN that)) (S (VP (VBP assert) (NP (NP (JJ proper) (NN use)) (PP (IN of) (NP (DT the) (NNP API)))))))))))))) (. .))
(S (ADVP (NNP Second)) (, ,) (NP (NP (DT a) (NN notion)) (PP (IN of) (NP (NN region))) (PP (IN for) (S (VP (VBG tracking) (NP (NP (NNS lifetimes)) (PP (IN of) (NP (NP (NNP OCaml) (NNS values)) (PP (IN on) (NP (NNP C) (NN side)))))))))) (VP (VBD let) (S (NP (PRP us)) (VP (VB trade) (NP (DT some) (NN performance)) (PP (IN for) (NP (NN simpler) (NN code)))))) (. .))
