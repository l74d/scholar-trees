(S (NP (DT This) (NN paper)) (VP (VBZ introduces) (NP (NP (DT the) (NNP Egison) (NN programming) (NN language)) (SBAR (WHNP (WP$ whose) (NN feature)) (S (VP (VBZ is) (NP (NP (JJ strong) (NN pattern)) (HYPH -) (SBAR (S (VP (VBG matching) (NP (NN facility)) (PP (IN against) (NP (CONJP (RB not) (RB only)) (NP (NP (JJ algebraic) (NNS data)) (NP (NNS types))) (CONJP (CC but) (RB also)) (NP (NP (JJ non-free) (NNS data) (NNS types)) (SBAR (WHNP (WP$ whose) (NML (NNS data))) (S (VP (VBP have) (NP (NP (JJ multiple) (NNS ways)) (PP (IN of) (NP (NP (NN representation)) (PP (JJ such) (IN as) (NP (NNS sets) (CC and) (NNS graphs))))))))))))))))))))) (. .))
(S (NP (PRP$ Our) (NN language)) (VP (VBZ supports) (NP (NP (NP (JJ multiple) (NNS occurrences)) (PP (IN of) (NP (NP (DT the) (JJ same) (NNS variables)) (PP (IN in) (NP (NP (DT a) (NN pattern)) (, ,) (NP (NP (JJ multiple) (NNS results)) (PP (IN of) (NP (NP (NML (NML (NN pattern) (HYPH -) (NN matching)) (, ,) (NML (NML (NML (NN polymorphism)) (PP (IN of) (NP (NN pattern) (HYPH -) (NNS constructors)))) (CC and) (NML (NN loop) (HYPH -) (NNS patterns))) (, ,)) (NNS patterns)) (SBAR (WHNP (WDT that)) (S (VP (VBP contain)))))) ('' ")))) (NML (NML (QP (CC and) (HYPH -) (RB so)) (HYPH -)) (ADVP (RB forth)))))) ('' ") (SBAR (WHNP (WP$ whose) (NML (NN repeat)) (NN count)) (S (VP (MD can) (VP (VB be) (VP (VBN changed) (PP (IN by) (NP (DT the) (NN parameter)))))))))) (. .))
(S (NP (DT This) (NN paper)) (VP (VBZ proposes) (NP (DT the) (NN way) (S (VP (TO to) (VP (VB design) (NP (NP (NNS expressions)) (SBAR (WHNP (WDT that)) (S (VP (VP (VBP have) (NP (PDT all) (DT these) (NNS features))) (CC and) (VP (VBZ demonstrates) (SBAR (WHADVP (WRB how)) (S (NP (DT these) (NNS features)) (VP (VBP are) (ADJP (JJ useful) (S (VP (TO to) (VP (VB express) (S (NP (NNS programs)) (ADJP (JJ concise)))))))))))))))))))) (. .))
(S (NP (NNP Egison)) (VP (VBZ has) (ADVP (RB already)) (VP (VBN implemented) (PP (IN in) (NP (NNP Haskell))))) (. .))
