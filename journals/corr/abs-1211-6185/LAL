(S (NP (PRP We)) (VP (VBP develop) (NP (NP (DT a) (JJ practical) (NN solution)) (PP (TO to) (NP (NP (DT the) (NN problem)) (PP (IN of) (NP (NP (JJ automatic) (NN verification)) (PP (IN of) (NP (NP (DT the) (NN interface)) (PP (IN between) (NP (NP (NN device) (NNS drivers)) (CC and) (NP (DT the) (NNP OS)))))))))))) (. .))
(S (NP (PRP$ Our) (NN solution)) (VP (NNS relies) (PP (IN on) (NP (NP (DT a) (NN combination)) (PP (IN of) (NP (NP (JJ improved) (NN driver) (NN architecture)) (CC and) (NP (NN verification) (NNS tools))))))) (. .))
(S (NP (PRP It)) (VP (VP (VBZ supports) (NP (NP (NNS drivers)) (VP (VBN written) (PP (IN in) (NP (NNP C)))))) (CC and) (VP (MD can) (VP (VB be) (VP (VBN implemented) (PP (IN in) (NP (DT any) (VBG existing) (NNP OS)))))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ sets) (NP (PRP it)) (ADVP (RB apart)) (PP (IN from) (NP (NP (JJ previous) (NNS proposals)) (PP (IN for) (NP (JJ verification-friendly) (NNS drivers))))))))) (. .))
(S (NP (PRP$ Our) (JJ Linux-based) (NN evaluation)) (VP (VBZ shows) (SBAR (IN that) (S (NP (DT this) (NN methodology)) (VP (VBZ amplifies) (NP (NP (DT the) (NN power)) (PP (IN of) (NP (VBG existing) (NN verification) (NNS tools))) (PP (IN in) (S (VP (VBG detecting) (NP (NN driver) (NNS bugs)))))) (, ,) (S (VP (VBG making) (S (NP (NP (PRP it))) (ADJP (JJ possible)) (S (VP (TO to) (VP (VB verify) (NP (NP (NNS properties)) (PP (IN beyond) (NP (NP (DT the) (NN reach)) (PP (IN of) (NP (JJ traditional) (NNS techniques)))))))))))))))) (. .))
