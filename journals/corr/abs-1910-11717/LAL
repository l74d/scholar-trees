(S (NP (NNP Lambda) (NN lifting)) (VP (VBZ is) (NP (NP (DT a) (JJ well-known) (NN transformation)) (, ,) (VP (ADVP (RB traditionally)) (VBN employed) (PP (IN for) (S (VP (VBG compiling) (NP (JJ functional) (NNS programs)) (PP (TO to) (NP (NNS supercombinators))))))))) (. .))
(S (ADVP (RB However)) (, ,) (S (NP (NP (ADJP (RBR more) (JJ recent)) (JJ abstract) (NNS machines)) (PP (IN for) (NP (NP (JJ functional) (NNS languages)) (PP (IN like) (NP (NNP OCaml) (CC and) (NNP Haskell)))))) (VP (VBP tend) (S (VP (TO to) (VP (VB do) (NP (VB closure) (NN conversion)) (ADVP (RB instead)) (PP (IN for) (NP (NP (JJ direct) (NN access)) (PP (TO to) (NP (DT the) (NN environment)))))))))) (, ,) (RB so) (S (NP (JJ lambda) (NN lifting)) (VP (VBZ is) (ADVP (DT no) (RB longer)) (ADJP (JJ necessary)) (S (VP (TO to) (VP (VB generate) (NP (NN machine) (NN code))))))) (. .))
(S (NP (PRP We)) (VP (VBP propose) (S (VP (TO to) (VP (VP (VB revisit) (NP (JJ selective) (NN lambda) (NN lifting)) (PP (IN in) (NP (DT this) (NN context))) (PP (IN as) (NP (DT an) (VBG optimising) (NN code) (NN generation) (NN strategy)))) (CC and) (VP (JJ conceive) (NP (NP (NNS heuristics)) (SBAR (S (VP (TO to) (VP (VB identify) (NP (JJ beneficial) (NN lifting) (NNS opportunities)))))))))))) (. .))
(S (NP (PRP We)) (VP (VBP give) (NP (NP (DT a) (JJ static) (NN analysis)) (PP (IN for) (S (VP (VBG estimating) (NP (NP (NN impact)) (PP (IN on) (NP (JJ heap) (NNS allocations))) (PP (IN of) (NP (DT a) (JJ lifting) (NN decision))))))))) (. .))
(S (NP (NP (NN Performance) (NNS measurements)) (PP (IN of) (NP (NP (PRP$ our) (NN implementation)) (PP (IN within) (NP (DT the) (NNP Glasgow) (NNP Haskell) (NNP Compiler))))) (PP (IN on) (NP (NP (DT a) (JJ large) (NN corpus)) (PP (IN of) (NP (NNP Haskell) (NNS benchmarks)))))) (VP (VBP suggest) (NP (JJ modest) (NNS speedups))) (. .))
