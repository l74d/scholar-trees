(FRAG (NP (NN Context)) (: :) (S (NP (NNP Developers) (NN design) (NN test) (NNS suites)) (VP (TO to) (ADVP (RB automatically)) (VP (VB verify) (SBAR (S (NP (DT that) (NN software)) (VP (VBZ meets) (NP (PRP$ its) (VBN expected) (NNS behaviors)))))))) (. .))
(S (NP (JJ Many) (JJ dynamic) (NN analysis) (NNS techniques)) (VP (VBP are) (VP (VBN performed) (PP (IN on) (NP (NP (DT the) (NN exploitation)) (PP (IN of) (NP (NN execution) (NNS traces))))) (PP (IN from) (NP (NN test) (NNS cases))))) (. .))
(S (ADVP (RB However)) (, ,) (PP (IN in) (NP (NN practice))) (, ,) (NP (EX there)) (VP (VBZ is) (NP (NP (RB only) (CD one) (NN trace)) (SBAR (WHNP (WDT that)) (S (VP (VBZ results) (PP (IN from) (NP (NP (DT the) (NN execution)) (PP (IN of) (NP (CD one))))) (NP (ADJP (RB manually) (HYPH -) (VBN written)) (NN test) (NN case))))))) (. .))
(FRAG (NP (NN Objective)) (: :) (S (PP (IN In) (NP (DT this) (NN paper))) (, ,) (NP (PRP we)) (VP (VBP propose) (NP (NP (DT a) (JJ new) (NN technique)) (PP (IN of) (NP (NP (NP (NN test) (NN suite)) (VP (VBG refactoring))) (, ,) (VP (VBN called) (NP (NNP B) (HYPH -) (NNP Refactoring)))))))) (. .))
(S (NP (NP (DT The) (NN idea)) (PP (IN behind) (NP (NN B) (HYPH -) (NN Refactoring)))) (VP (VBZ is) (S (VP (TO to) (VP (VB split) (NP (DT a) (NN test) (NN case)) (PP (IN into) (NP (NP (JJ small) (NN test) (NNS fragments)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBP cover) (NP (NP (DT a) (JJR simpler) (NN part)) (PP (IN of) (NP (DT the) (NN control) (NN flow)))) (S (VP (TO to) (VP (VB provide) (NP (JJR better) (NN support)) (PP (IN for) (NP (JJ dynamic) (NN analysis))))))))))))))) (. .))
(FRAG (NP (NN Method)) (: :) (S (PP (IN For) (NP (DT a) (VBN given) (NN dynamic) (NN analysis) (NN technique))) (, ,) (NP (NP (PRP$ our) (NN test) (NN suite)) (VP (VBG refactoring) (NP (NN approach)))) (VP (VP (VBZ monitors) (NP (NP (DT the) (NN execution)) (PP (IN of) (NP (NN test) (NNS cases))))) (CC and) (VP (VBZ identifies) (NP (JJ small) (NN test) (NNS cases)) (PP (IN without) (NP (NP (NN loss)) (PP (IN of) (NP (DT the) (NN test) (NN ability)))))))) (. .))
(S (NP (PRP We)) (VP (VBP apply) (NP (NN B) (HYPH -) (NN Refactoring)) (S (VP (TO to) (VP (VB assist) (NP (NP (CD two) (VBG existing) (NN analysis) (NNS tasks)) (: :) (NP (NP (NP (JJ automatic) (NN repair)) (PP (IN of) (NP (NML (PP (IN if) (HYPH -) (NP (NNS statements)))) (NNS bugs)))) (CC and) (NP (NP (JJ automatic) (NN analysis)) (PP (IN of) (NP (NN exception) (NNS contracts)))))))))) (. .))
(FRAG (NP (NNS Results)) (: :) (S (NP (JJ Experimental) (NNS results)) (VP (VBP show) (SBAR (IN that) (S (NP (NP (NN test) (NN suite)) (VP (VBG refactoring))) (VP (MD can) (ADVP (RB effectively)) (VP (VB simplify) (NP (NP (DT the) (NN execution) (NNS traces)) (PP (IN of) (NP (DT the) (NN test) (NN suite)))))))))) (. .))
(S (S (NP (NP (CD Three) (NML (JJ real) (HYPH -) (NN world)) (NNS bugs)) (SBAR (WHNP (WDT that)) (S (VP (MD could) (ADVP (RB previously)) (RB not) (VP (VB be) (VP (VBN fixed) (PP (IN with) (NP (DT the) (JJ original) (NN test) (NN suite))))))))) (VP (VBP are) (VP (VBN fixed) (PP (IN after) (S (VP (VBG applying) (NP (NN B) (HYPH -) (NN Refactoring)))))))) (: ;) (S (ADVP (RB meanwhile)) (, ,) (NP (NN exception) (NNS contracts)) (VP (VBP are) (ADVP (RBR better)) (VP (VBN verified) (PP (IN via) (S (VP (VBG applying) (NP (NN B) (HYPH -) (NN Refactoring)) (PP (IN to) (NP (JJ original) (NN test) (NNS suites))))))))) (. .))
(FRAG (NP (NNS Conclusions)) (: :) (S (NP (PRP We)) (VP (VBP conclude) (SBAR (IN that) (S (S (VP (VBG applying) (NP (NN B) (HYPH -) (NN Refactoring)))) (VP (MD can) (ADVP (RB effectively)) (VP (VB improve) (NP (NP (DT the) (NN purity)) (PP (IN of) (NP (NN test) (NNS cases)))))))))) (. .))
(S (NP (VBG Existing) (NML (JJ dynamic) (NN analysis)) (NNS tasks)) (VP (MD can) (VP (VB be) (VP (VBN enhanced) (PP (IN by) (NP (NP (NN test) (NN suite)) (VP (VBG refactoring))))))) (. .))
