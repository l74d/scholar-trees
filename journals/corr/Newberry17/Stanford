(S (VP (VB Let) (S (NP (NN H) (PRN (-LRB- -LRB-) (NP (NN P) (, ,) (NN n)) (-RRB- -RRB-))) (VP (VB be) (NP (NP (NP (DT a) (NN program)) (SBAR (WHNP (WDT that)))) (CC either) (NP (NP (NNS loops) (CC or) (NNS returns)) (ADJP (RB only) (JJ TRUE) (CC or) (JJ FALSE))))))) (. .))
(S (NP (DT The) (NN parameter) (NN P)) (VP (VBZ is) (NP (NP (DT a) (NN program) (CC and) (NN n)) (SBAR (S (VP (VBZ is) (NP (PRP$ its) (NN input))))))) (. .))
(S (VP (VP (VB Suppose) (S (NP (DT that)) (ADJP (ADJP (NN H) (PRN (-LRB- -LRB-) (NP (NN P) (, ,) (NN n)) (-RRB- -RRB-))) (SBAR (S (VP (SYM =) (ADJP (JJ TRUE)))))) (SBAR (IN if) (CC and) (RB only) (S (SBAR (IN if) (S (NP (NP (NN P) (NNS halts)) (PP (IN on) (NP (NN n.)))) (VP (VB Suppose) (ADVP (ADVP (RB further)) (SBAR (IN that) (FRAG (NP (NN IF) (NN H))))) (NP (NP (-LRB- -LRB-) (NP (NN P)) (, ,) (NP (NN n)) (-RRB- -RRB-)) (VP (SYM =) (NP (JJ false))))))) (ADVP (RB THEN)) (NP (NN P)) (VP (VBZ does) (RB not) (VP (VB halt) (PP (IN on) (NP (NN n))))))))) (, ,) (CC and) (VP (VB suppose) (SBAR (IN that) (S (NP (NN H)) (VP (VBZ is) (ADJP (JJ sound))))))) (. .))
(S (VP (VB Let) (ADVP (RB furthermore)) (NP (NN P) (SYM *)) (VP (VB be) (NP (NP (DT a) (NN program)) (PP (IN with) (NP (PRP itself)))) (PP (IN as) (NP (DT a) (NN parameter))))) (. .))
(S (S (NP (DT The) (NN claim)) (VP (VBZ is) (SBAR (IN that) (S (NP (EX there)) (VP (VBZ exists) (NP (DT a) (NN program) (NN H)) (SBAR (JJ such) (IN that) (S (NP (NP (NP (NN H) (PRN (-LRB- -LRB-) (NP (NN H)) (, ,) (NP (NN H) (SYM *)) (-RRB- -RRB-))) (SYM =) (NP (JJ FALSE))) (, ,) (NP (DT that))) (VP (VBZ is) (, ,) (SBAR (S (NP (NN H)) (VP (VBZ proves) (SBAR (IN that) (S (NP (PRP it)) (VP (VBZ does) (RB not) (VP (VB prove) (NP (DT that) (NN H))))))))))))))))) (NFP *) (VP (VBZ halts)) (. .))
