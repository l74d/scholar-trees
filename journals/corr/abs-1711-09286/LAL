(S (NP (PRP We)) (VP (MD would) (VP (VB like) (S (VP (TO to) (VP (VB use) (NP (DT the) (NNP Coq) (NN proof) (NN assistant)) (S (VP (TO to) (VP (ADVP (RB mechanically)) (VB verify) (NP (NP (NNS properties)) (PP (IN of) (NP (NNP Haskell) (NNS programs)))))))))))) (. .))
(S (PP (TO To) (NP (DT that) (NN end))) (, ,) (NP (PRP we)) (VP (VBP present) (NP (NP (DT a) (NN tool)) (, ,) (VP (VBN named) (S (NP (NN hs-to-coq)))) (, ,) (SBAR (WHNP (WDT that)) (S (VP (VBZ translates) (NP (JJ total) (NNP Haskell) (NNS programs)) (PP (IN into) (NP (NNP Coq) (NNS programs))) (PP (IN via) (NP (DT a) (JJ shallow) (NN embedding)))))))) (. .))
(S (NP (PRP We)) (VP (VP (VBP apply) (NP (PRP$ our) (NN tool)) (PP (IN in) (NP (NP (CD three) (NN case) (NNS studies)) (PRN (: —) (NP (NP (DT a) (JJ lawful) (NNP Monad) (NN instance)) (, ,) (`` ``) (NP (NP (NNP Hutton) (POS 's)) (NN razor)) ('' '') (, ,) (CC and) (NP (DT an) (VBG existing) (NN data) (NN structure) (NN library))) (: —))))) (CC and) (VP (VB prove) (NP (PRP$ their) (NN correctness)))) (. .))
(S (NP (DT These) (NNS examples)) (VP (VBP show) (SBAR (SBAR (IN that) (S (NP (DT this) (NN approach)) (VP (VBZ is) (ADJP (JJ viable))))) (: :) (UCP (DT both) (SBAR (IN that) (S (NP (NN hs-to-coq)) (VP (NNS applies) (PP (TO to) (NP (VBG existing) (NNP Haskell) (NN code)))))) (, ,) (CC and) (SBAR (IN that) (S (NP (NP (DT the) (NN output)) (SBAR (S (NP (PRP it)) (VP (VBZ produces))))) (VP (VBZ is) (ADJP (JJ amenable) (PP (TO to) (NP (NN verification)))))))))) (. .))
