(S (NP (NP (DT An) (ADJP (RB increasingly) (JJ large)) (NN number)) (PP (IN of) (NP (NNP HPC) (NNS systems)))) (VP (RB rely) (PP (IN on) (NP (NP (JJ heterogeneous) (NNS architectures)) (VP (VBG combining) (NP (JJ traditional) (JJ multi-core) (NNP CPUs)) (PP (IN with) (NP (NN power) (JJ efficient) (NNS accelerators))))))) (. .))
(S (S (VP (VBG Designing) (NP (JJ efficient) (NNS applications)) (PP (IN for) (NP (DT these) (NNS systems))))) (VP (VBZ has) (VP (VBN been) (ADJP (VBN troublesome)) (PP (IN in) (NP (DT the) (JJ past))) (SBAR (IN as) (S (NP (NNS accelerators)) (VP (MD could) (ADVP (RB usually)) (VP (VB be) (VP (VBN programmed) (S (VP (VBG using) (NP (NP (JJ specific) (NN programming) (NNS languages)) (VP (VBG threatening) (NP (NN maintainability) (, ,) (NN portability) (CC and) (NN correctness))))))))))))) (. .))
(S (NP (JJ Several) (JJ new) (NN programming) (NNS environments)) (VP (VBP try) (S (VP (TO to) (VP (VB tackle) (NP (DT this) (NN problem)))))) (. .))
(S (PP (IN Among) (NP (PRP them))) (, ,) (NP (NNP OpenACC)) (VP (VBZ offers) (NP (NP (DT a) (JJ high-level) (NN approach)) (VP (VBN based) (PP (IN on) (NP (NP (NN compiler) (JJ directive) (NNS clauses)) (SBAR (S (VP (TO to) (VP (VB mark) (NP (NP (NNS regions)) (PP (IN of) (NP (VBG existing) (NNP C) (, ,) (NNP C++) (CC or) (NNP Fortran) (NNS codes))) (SBAR (S (VP (TO to) (VP (VB run) (PP (IN on) (NP (NNS accelerators))))))))))))))))) (. .))
(S (S (NP (DT This) (NN approach)) (VP (ADVP (RB directly)) (VBZ addresses) (NP (NN code) (NN portability)) (, ,) (S (VP (VBG leaving) (PP (TO to) (NP (VB compilers))) (NP (NP (DT the) (NN support)) (PP (IN of) (NP (DT each) (JJ different) (NN accelerator)))))))) (, ,) (CC but) (S (NP (CD one)) (VP (VBZ has) (S (VP (TO to) (VP (ADVP (RB carefully)) (VB assess) (NP (NP (DT the) (JJ relative) (NNS costs)) (PP (IN of) (NP (JJ portable) (NNS approaches))) (PP (IN versus) (NP (VBG computing) (NN efficiency))))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (NP (PRP we)) (VP (VBP address) (NP (RB precisely) (DT this) (NN issue)) (, ,) (S (VP (VBG using) (PP (IN as) (NP (DT a) (NN test-bench))) (NP (DT a) (ADJP (RB massively) (JJ parallel)) (NNP Lattice) (NNP Boltzmann) (NN algorithm))))) (. .))
(S (NP (PRP We)) (ADVP (RB first)) (VP (VB describe) (NP (NP (PRP$ our) (JJ multi-node) (NN implementation) (CC and) (NN optimization)) (PP (IN of) (NP (DT the) (NN algorithm)))) (, ,) (S (VP (VBG using) (NP (NNP OpenACC) (CC and) (NNP MPI))))) (. .))
(S (NP (PRP We)) (ADVP (RB then)) (VP (VP (VBD benchmark) (NP (DT the) (NN code)) (PP (IN on) (NP (NP (DT a) (NN variety)) (PP (IN of) (NP (NNS processors))) (, ,) (PP (VBG including) (NP (NP (JJ traditional) (NNP CPUs)) (CC and) (NP (NNP GPUs)))) (, ,)))) (CC and) (VP (VB make) (NP (NP (JJ accurate) (NN performance) (NNS comparisons)) (PP (IN with) (NP (NP (NP (JJ other) (NNP GPU) (NNS implementations)) (PP (IN of) (NP (DT the) (JJ same) (NN algorithm)))) (VP (VBG using) (NP (NNP CUDA) (CC and) (NNP OpenCL)))))))) (. .))
(S (NP (PRP We)) (ADVP (RB also)) (VP (VBZ asses) (NP (NP (NP (DT the) (NN performance) (NN impact)) (VP (VBN associated) (PP (TO to) (NP (VB portable) (NN programming))))) (, ,) (CC and) (NP (NP (DT the) (JJ actual) (NN portability) (CC and) (NN performance-portability)) (PP (IN of) (NP (JJ OpenACC-based) (NNS applications))) (PP (IN across) (NP (JJ several) (JJ state-of-the-) (NN art) (NNS architectures)))))) (. .))
