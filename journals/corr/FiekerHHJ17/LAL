(S (NP (PRP We)) (VP (VBP introduce) (NP (NP (CD two) (JJ new) (NNS packages)) (, ,) (NP (NNP Nemo) (CC and) (NNP Hecke)) (, ,) (VP (VBN written) (PP (IN in) (NP (DT the) (NNP Julia) (NN programming) (NN language))) (PP (IN for) (NP (NP (NN computer) (NN algebra)) (CC and) (NP (NN number) (NN theory))))))) (. .))
(S (NP (PRP We)) (VP (VBP demonstrate) (SBAR (DT that) (S (NP (JJ high) (NN performance) (JJ generic) (NN algorithms)) (VP (MD can) (VP (VB be) (VP (VBN implemented) (PP (IN in) (NP (NNP Julia))) (, ,) (PP (IN without) (NP (DT the) (NN need) (S (VP (TO to) (VP (VB resort) (PP (TO to) (NP (DT a) (JJ low-level) (NNP C) (NN implementation)))))))))))))) (. .))
(S (PP (IN For) (NP (VBN specialised) (NN algorithms))) (, ,) (NP (PRP we)) (VP (VBP use) (NP (NP (NNP Julia) (POS 's)) (JJ efficient) (JJ native) (NNP C) (NN interface)) (S (VP (TO to) (VP (VB wrap) (NP (NP (VBG existing) (NNP C/C++) (NNS libraries)) (PP (JJ such) (IN as) (NP (NNP Flint) (, ,) (NNP Arb) (, ,) (NNP Antic) (CC and) (NNP Singular)))))))) (. .))
(S (NP (PRP We)) (VP (VP (VBP give) (NP (NP (NNS examples)) (PP (IN of) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB use) (NP (NNP Hecke) (CC and) (NNP Nemo))))))))) (CC and) (VP (VB discuss) (NP (NP (DT some) (NNS algorithms)) (SBAR (WHNP (IN that)) (S (NP (PRP we)) (VP (VBP have) (VP (VBN implemented) (S (VP (TO to) (VP (VB provide) (NP (ADJP (JJ high) (NN performance)) (JJ basic) (JJ arithmetic)))))))))))) (. .))
