(S (NP (PRP We)) (VP (VBP consider) (NP (NP (DT the) (JJ untyped) (NN lambda) (NN calculus)) (PP (IN with) (NP (NP (NNS constructors)) (CC and) (NP (ADJP (RB recursively) (JJ defined)) (NNS constants)))))) (. .))
(S (NP (PRP We)) (VP (VBP construct) (NP (DT a) (JJ domain-theoretic) (NN model)) (SBAR (JJ such) (IN that) (S (NP (NP (DT any) (NN term)) (VP (RB not) (VBG denoting) (NP (NN bottom)))) (VP (VBZ is) (VP (RB strongly) (VBG normalising)) (PP (VBN provided) (SBAR (S (NP (PDT all) (PRP$ its) (`` `) (JJ stratified) (NNS approximations) (POS â€º)) (VP (VBP are))))))))) (. .))
(S (PP (IN From) (NP (DT this))) (NP (PRP we)) (VP (VP (VBP derive) (NP (NP (DT a) (JJ general) (NN normalisation) (NN theorem)) (PP (IN for) (NP (JJ applied) (VBD typed) (NN lambda-calculi))))) (: :) (S (SBAR (IN If) (S (NP (DT all) (NNS constants)) (VP (VBP have) (NP (DT a) (JJ total) (NN value))))) (, ,) (ADVP (RB then)) (NP (DT all) (JJ typeable) (NNS terms)) (VP (VBP are) (ADJP (RB strongly) (VBG normalising))))) (. .))
