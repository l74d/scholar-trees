(S (NP (NNP Linear) (NN type) (NNS systems)) (VP (VBP have) (NP (NP (DT a) (ADJP (JJ long) (CC and) (JJ storied)) (NN history)) (, ,) (CONJP (CC but) (RB not)) (NP (NP (DT a) (JJ clear) (NN path)) (ADVP (RB forward)) (S (VP (TO to) (VP (VB integrate) (PP (IN with) (NP (NP (VBG existing) (NNS languages)) (PP (JJ such) (IN as) (NP (NP (NN OCaml)) (CC or) (NP (NNP Haskell)))))))))))) (. .))
(S (PP (IN In) (NP (DT this) (NN paper))) (, ,) (NP (PRP we)) (VP (VBP study) (S (NP (NP (DT a) (NML (JJ linear) (NN type)) (NN system)) (VP (VBN designed) (PP (IN with) (NP (NP (NP (CD two) (JJ crucial) (NNS properties)) (PP (IN in) (NP (NN mind)))) (: :) (NP (ADVP (RB backwards)) (NP (HYPH -) (NN compatibility)) (CC and) (NP (NN code))))))) (VP (VB reuse) (PP (IN across) (NP (NP (ADJP (JJ linear) (CC and) (JJ non-linear)) (NNS users)) (PP (IN of) (NP (DT a) (NN library)))))))) (. .))
(SINV (ADVP (RB Only)) (VP (ADVP (RB then)) (MD can)) (NP (NP (DT the) (NNS benefits)) (PP (IN of) (NP (NP (JJ linear) (NNS types)) (SBAR (S (VP (VBP permeate) (NP (JJ conventional) (JJ functional) (NN programming)))))))) (. .))
(S (PP (RB Rather) (IN than) (S (VP (VB bifurcate) (NP (NNS types)) (PP (IN into) (NP (ADJP (JJ linear) (CC and) (JJ non-linear)) (NNS counterparts)))))) (, ,) (NP (PRP we)) (ADVP (RB instead)) (VP (VBP attach) (NP (NN linearity)) (S (VP (TO to) (VP (VB function) (NP (NNS arrows)))))) (. .))
(S (NP (NNP Linear)) (VP (VP (VBZ functions) (SBAR (S (VP (MD can) (VP (VB receive) (NP (NNS inputs)) (PP (IN from) (NP (ADJP (RB linearly) (HYPH -) (VBN bound)) (NNS values)))))))) (, ,) (CC but) (VP (MD can) (ADVP (RB also)) (VP (VB operate) (PP (IN over) (NP (JJ unrestricted) (, ,) (JJ regular) (NNS values)))))) (. .))
(S (S (VP (TO To) (VP (VB demonstrate) (NP (NP (DT the) (NN efficacy)) (PP (IN of) (NP (NP (PRP$ our) (NML (JJ linear) (NN type)) (NML (NN system) (HYPH -) (CC both))) (SBAR (SBAR (WHADJP (WRB how) (ADJP (JJ easy))) (S (NP (PRP it)) (VP (MD can) (VP (VB be) (VP (VBN integrated) (PP (IN in) (NP (DT an) (VBG existing) (NN language) (NN implementation)))))))) (CC and) (SBAR (WHADVP (WRB how)) (S (VP (VBD streamlined) (SBAR (S (NP (PRP it)) (VP (VBZ makes) (S (NP (PRP it)) (VP (TO to) (VP (VB write) (NP (NNS programs)) (PP (IN with) (NP (JJ linear) (NNS types))))))))))))))))))) (, -) (NP (PRP we)) (VP (VBD implemented) (NP (PRP$ our) (NN type) (NN system)) (PP (IN in) (NP (NP (NNP GHC)) (, ,) (NP (DT the) (VBG leading) (NNP Haskell) (NN compiler)) (, ,) (CC and) (S (S (VP (VBP demonstrate) (NP (NP (CD two) (NNS kinds)) (PP (IN of) (NP (NP (NNS applications)) (PP (IN of) (NP (JJ linear) (NNS types)))))))) (: :) (S (NP (NP (JJ mutable) (NNS data)) (PP (IN with) (ADJP (JJ pure)))) (VP (VBZ interfaces))) (: ;) (CC and) (S (VP (VBG enforcing) (NP (NP (NNS protocols)) (PP (IN in) (NP (ADJP (NP (NN I) (HYPH /) (NN O)) (HYPH -) (VBG performing)) (NNS functions)))))))))) (. .))
