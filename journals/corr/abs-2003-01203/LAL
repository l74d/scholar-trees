(S (NP (PRP We)) (VP (VBP develop) (CC and) (VBP analyze) (NP (NP (JJ concurrent) (NN algorithms)) (PP (IN for) (NP (NP (DT the) (NN disjoint) (VBN set) (NN union) (PRN (-LRB- -LRB-) (JJ union-find) (-RRB- -RRB-)) (NN problem)) (PP (IN in) (NP (NP (DT the) (JJ shared) (NN memory) (, ,) (JJ asynchronous) (NN multiprocessor) (NN model)) (PP (IN of) (NP (NN computation)))))))) (, ,) (PP (IN with) (NP (NP (NP (NP (NNP CAS)) (PRN (-LRB- -LRB-) (NP (NN compare) (CC and) (NN swap)) (-RRB- -RRB-))) (CC or) (NP (NP (NNP DCAS)) (PRN (-LRB- -LRB-) (NP (JJ double) (NN compare) (CC and) (NN swap)) (-RRB- -RRB-)))) (PP (IN as) (NP (DT the) (NN synchronization) (NN primitive)))))) (. .))
(S (NP (PRP We)) (VP (VBP give) (NP (NP (CD two) (JJ randomized) (NNS algorithms)) (SBAR (WHNP (WDT that)) (S (VP (VP (VBP use) (NP (RB only) (NNP CAS))) (CC and) (VP (VBP have) (S (NP (DT the) (JJ same) (NN work)) (VP (NN bound) (PP (IN in) (NP (NN expectation))))))))))) (. .))
(S (NP (NP (DT The) (NN analysis)) (PP (IN of) (NP (DT the) (JJ second) (JJ randomized) (NN algorithm)))) (VP (VBZ is) (ADJP (JJ valid)) (SBAR (RB even) (IN if) (S (NP (DT the) (NN scheduler)) (VP (VBZ is) (ADJP (JJ adversarial)))))) (. .))
(S (NP (PRP$ Our) (NN work) (CC and) (VB step) (NNS bounds)) (VP (VB grow) (ADVP (RB only) (RB logarithmically)) (PP (IN with) (NP ($ $) (JJ p) ($ $))) (, ,) (S (VP (VBG making) (S (NP (PRP$ our) (NN algorithms)) (ADJP (RB truly) (JJ scalable)))))) (. .))
(S (NP (PRP We)) (VP (VBP prove) (SBAR (IN that) (S (PP (IN for) (NP (NP (DT a) (NN class)) (PP (IN of) (NP (JJ symmetric) (NN algorithms))) (SBAR (WHNP (WDT that)) (S (VP (VBZ includes) (NP (NNS ours))))))) (, ,) (NP (DT no) (JJR better) (NN step) (CC or) (NN work) (NN bound)) (VP (VBZ is) (ADJP (JJ possible)))))) (. .))
